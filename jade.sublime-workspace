{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"new",
				"newline"
			],
			[
				"prev",
				"previous_stack	variable"
			],
			[
				"jade",
				"jadeToTreeWorker	function"
			],
			[
				"jad",
				"jadeToTreeWorker	function"
			],
			[
				"ind",
				"index	variable"
			],
			[
				"inde",
				"index_ptr	variable"
			],
			[
				"pare",
				"parents	variable"
			],
			[
				"interpo",
				"StringInterpolation"
			],
			[
				"Inter",
				"StringInterpolation"
			],
			[
				"count",
				"countUntil	function"
			],
			[
				"pt",
				"ParseTree"
			],
			[
				"repli",
				"replicate	function"
			],
			[
				"endOf",
				"endOfInput"
			],
			[
				"endO",
				"endOfLine"
			],
			[
				"endIO",
				"endOfLine"
			],
			[
				"In",
				"Indent"
			],
			[
				"InlineT",
				"InlineText"
			],
			[
				"Tag",
				"TagArgs"
			],
			[
				"TagA",
				"TagArgs"
			],
			[
				"render",
				"renderToken	function"
			],
			[
				"id",
				"id_token"
			],
			[
				"show",
				"showme_id"
			],
			[
				"md-li",
				"md-list-item"
			]
		]
	},
	"buffers":
	[
		{
			"file": "source/app.d",
			"settings":
			{
				"buffer_size": 607,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Node(\"Jade.RootTag\", [], [\n	Node(\"Jade.Line\", [\"extends\", \"base_layout.jade\"], [\n		Node(\"Jade.Line\", [\"\\n\"], [\n			Node(\"Jade.Line\", [\"block\", \"title\"], [\n				Node(\"Jade.Line\", [\"\\t\", \"title\"], [\n					Node(\"Jade.Line\", [\"\\n\"], [Node(\"Jade.Line\", [\"block\", \"content\"], [Node(\"Jade.Line\", [\"\\t\", \"//\"], [Node(\"Jade.Line\", [\"\\t\", \"p\"], [Node(\"Jade.Line\", [\"\\t\\t\", \" That continues on\"], [Node(\"Jade.Line\", [\"\\t\\t\", \" multiple lines of index.jade\"], [Node(\"Jade.Line\", [\"\\t\", \"ul\"], [Node(\"Jade.Line\", [\"\\t\\t\", \"li\"], [Node(\"Jade.Line\", [\"\\t\", \".\"], [])])])])])])])])])])])])])])\n",
			"settings":
			{
				"buffer_size": 575,
				"line_ending": "Unix",
				"name": "Node(\"Jade.RootTag\", [], ["
			}
		},
		{
			"file": "source/jade/package.d",
			"settings":
			{
				"buffer_size": 37,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "module jade.base;\n\nimport std.stdio;\nimport std.file;\nimport std.array : replicate;\n\nimport jade.pegged;\n\nimport std.conv : to;\n\nstring render(alias filename)() {\n	pragma(msg, \"compile time:\");\n	enum templ = import(filename);\n	enum tmp = blockWrapJadeFile(templ);\n	pragma(msg, \"===============================================================================\");\n	//return tmp;\n	enum parse_tree = Jade(tmp);\n	enum tmp2 = jadeToTree(parse_tree);\n	printParseTree(tmp2);\n	return \"\";\n	//pragma(msg, parse_tree);\n	//enum result = renderParseTree(filename, parse_tree); // Should we use a different readParseTree function here? This is the last place I currently use enum...\n	//return result;\n}\n\nvoid render(T)(T output_stream, string filename) {\n	auto templ = readText(\"views/\"~filename);\n	auto tmp = blockWrapJadeFile(templ);\n	auto parse_tree = Jade(tmp);\n	//writeln(\"tree\\n\", parse_tree);\n	//auto tmp2 = jadeToTree(parse_tree);\n	//output_stream.write(tmp2);\n	auto result = renderParseTree(filename, parse_tree);\n	////auto result = \"%s\".format(parse_tree);\n	output_stream.write(result);\n}\n\nimport pegged.parser;\nimport std.string : format;\nstring renderParseTree(string filename, ParseTree p) {\n	auto parser = new JadeParser(filename, p);\n	return parser.render();\n}\n\nimport std.array;\nstruct JadeParser {\n	string name;\n	struct LineRange {\n		size_t index = 0;\n		ParseTree[] lines;\n		ParseTree front() {\n			// get a reconstructed line that \n			return lines[index];\n		}\n		void popFront() {\n			// move forward, past all indented lines\n			index++;\n		}\n		bool empty() {\n			return index >= lines.length;\n		}\n	}\n	this(string filename, ParseTree p) {\n		import std.string : indexOf;\n		this.name = filename[0..filename.indexOf(\".\")];\n\n		writeln(this);\n	}\n	string render() {\n		return \"\";\n	}\n}\n\nbool isIndentedLine(ParseTree p) {\n	if (p.children.length < 1 || p.name != \"Jade.Line\" || p.children[0].name != \"Jade.Indent\" || p.children[1].name != \"Jade.Line\") {\n		return false;\n	}\n	if (p.matches.length > 0 && p.children.length > 0 && p.matches[0][0]=='\\t') {\n		return true;\n	}\n	return false;\n}\n\nParseTree* findParseTree(ref ParseTree p, string name, int maxDepth=int.min) {\n	if (maxDepth != int.min && maxDepth < 0) return null;\n	if (p.name == name) {\n		return &p;\n	}\n	foreach (child; p.children) {\n		auto tmp = findParseTree(child, name, maxDepth-1);\n		if (tmp !is null) {\n			return tmp;\n		}\n	}\n	return null;\n}\n\n\n\n\n\n/**\n * Pre-process jade file, making pegged parser capable of understanding indented BlockInATag blocks\n */\nstring blockWrapJadeFile(string templ) {\n	import std.conv;\n	import std.algorithm : countUntil;\n	import std.array;\n	import std.string : split, strip, lineSplitter;\n	auto buf = appender!string;\n	buf.reserve(templ.length*2);\n\n	long last_indent;\n	long raw_indent;\n	bool isRawBlock;\n	foreach (line; templ.lineSplitter) {\n		if (line == \"}\") throw new Exception(\"Unexpected } on line by itself\"); // protect against accidental use of our special marker\n		auto indent = line.countUntil!\"a != 0x09\";\n		auto strippedLine = line.strip;\n		indent = indent < 0 ? 0 : indent;\n\n		//buf ~= to!string(indent);\n		if (line.length>0 && strippedLine[$-1]=='.' && indent <= raw_indent) {\n			if (isRawBlock) buf ~= \"}\\n\"; // if a raw block tag follows a raw block tag\n\n			buf ~= line;\n			buf ~= '{';\n			isRawBlock = true;\n			raw_indent = indent;\n		} else if (isRawBlock && indent <= raw_indent) {\n			buf ~= \"}\\n\";\n			isRawBlock = false;\n			buf ~= line;\n		} else {\n			buf ~= line;\n		}\n		buf ~= '\\n';\n		last_indent = indent;\n	}\n\n	return buf.data;\n}\nNode jadeToTree(ref ParseTree p) {\n	size_t index;\n	auto ret = Node(p.children[0].name);\n	jadeToTreeWorker(ret, p.children[0].children, index);\n	writeln(\"ret: \", ret);\n	return ret;\n}\nstruct Node {\n	string name;\n	string[] matches;\n	Node[] children;\n}\nvoid jadeToTreeWorker(ref Node parent, ParseTree[] lines, ref size_t index, int parent_depth = -1) {\n	writeln(\">>>>\");\n	while (index < lines.length-1) {\n		auto current = lines[index];\n		auto depth = cast(int)(current.matches.length > 0 && current.matches[0].length > 0 && current.matches[0][0] == '\\t' ? current.matches[0].length : 0);\n		if (depth <= parent_depth) {\n			return;\n		}\n		parent.children ~= Node(current.name, current.matches[0.. $ > 2 ? 2 : $]);\n		jadeToTreeWorker(parent.children[$-1], lines[index+1..$], index, depth);\n		index++;\n	}\n	//writeln(\"p::\", ret);\n}\n",
			"file": "source/jade/base.d",
			"file_size": 4315,
			"file_write_time": 130958591322366810,
			"settings":
			{
				"buffer_size": 4352,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "oldbase 2\nmodule jade.base;\n\nimport std.stdio;\nimport std.file;\nimport std.array : replicate;\n\nimport jade.pegged;\n\nimport std.conv : to;\n\nstring render(alias filename)() {\n	pragma(msg, \"compile time:\");\n	enum templ = import(filename);\n	enum tmp = blockWrapJadeFile(templ);\n	pragma(msg, \"===============================================================================\");\n	//return tmp;\n	enum parse_tree = Jade(tmp);\n	enum tmp2 = jadeToTree(parse_tree);\n	printParseTree(tmp2);\n	return \"\";\n	//pragma(msg, parse_tree);\n	//enum result = renderParseTree(filename, parse_tree); // Should we use a different readParseTree function here? This is the last place I currently use enum...\n	//return result;\n}\n\nvoid render(T)(T output_stream, string filename) {\n	auto templ = readText(\"views/\"~filename);\n	auto tmp = blockWrapJadeFile(templ);\n	auto parse_tree = Jade(tmp);\n	writeln(\"tree\\n\", parse_tree);\n	//auto tmp2 = jadeToTree(parse_tree);\n	//output_stream.write(tmp2);\n	auto result = renderParseTree(filename, parse_tree);\n	////auto result = \"%s\".format(parse_tree);\n	output_stream.write(result);\n}\n\nimport pegged.parser;\nimport std.string : format;\nstring renderParseTree(string filename, ParseTree p) {\n	auto parser = new JadeParser(filename, p);\n	return parser.render();\n}\n\nstruct JadeParser {\n	import std.array : Appender, appender;\n	string filename;\n	ParseTree root;\n	ParseTree* parent; // the parent of the current children being processed\n	string templateStruct;\n\n	int last_indent, indent;\n	size_t line_number;\n	bool in_block;\n	size_t block_indent;\n	size_t skip; // the number of lines to skip in main loop\n	int currentChild; // the current child index into parent.children;\n	string[] parents;\n	auto struct_output = appender!string;\n	auto render() {\n		import std.algorithm : until;\n		auto output = appender!string;\n		templateStruct = \"%sTemplate\".format(filename.until('.'));\n		struct_output ~= \"struct %sTemplateS {\\n\".format(filename.until('.'));\n		output ~= \"sink(`\";\n		renderToken(output, root);\n		printClosingTags(output);\n		output ~= \"`, %s);\".format(line_number);\n		struct_output ~= \"} // struct %sS\\n%sS %s;\".format(templateStruct, templateStruct, templateStruct);\n		return struct_output.data ~ output.data;\n	}\n\n	auto printClosingTags(ref Appender!string html, int diff=-1, string file=__FILE__, int line=__LINE__) {\n		if (parents.length <=0) return html;\n\n		if (diff<0) {\n			diff = cast(int)(last_indent - indent); // an equal indent is a un-indent of 1\n		}\n		if (diff == 0) {\n			diff = 1;\n		}\n		assert(diff <= parents.length, \"Too many indents: %s vs %s @%s:%d processing %s:%d\\n%s\".format(diff, parents.length, file, line, filename, line_number, parents));\n		for (auto i=diff; i > 0; i--) {\n			html ~= \"`); sink(`</%s>`,%d, %d); sink(`\".format(parents[$-1], line_number, indent-1);\n			parents = parents[0..$-1];\n		}\n		return html;\n	}\n	void renderToken(ref Appender!string output, ref ParseTree p) {\n		switch(p.name) {\n			case \"Jade.DocType\":\n				line_number++;\n				output ~= \"<!DOCTYPE %s>\".format(p.matches[0]);\n				break;\n			case \"Jade.Comment\":\n				line_number++;\n				break;\n			case \"Jade.Line\":\n				renderLine(output, p);\n				break;\n			default:\n				output ~= \"==========\\n\";\n				parent = &p;\n				currentChild = -1;\n				foreach (child; p.children) {\n					currentChild++;\n					if (skip) {\n						skip--;\n						continue;\n					}\n					//if (child.children.length > 0) {\n					//	output ~= \"-\"~child.name~\"-\";\n					//	output ~= renderParseTree(child);\n					//} else {\n						if (child.matches.length > 0) {\n\n\n								indent = 0;\n										bool decreased_indent, mustRecordIndent;\n										//writefln(\"indents: %s and %s\\t%s\", p.matches.length > 0, p.matches[0][0]=='\\t', p);\n										if (child.matches.length > 0 && child.matches[0][0]=='\\t') {\n											foreach (t; child.matches[0]) { assert(t == '\\t', \"All indents must be tabs at line: %d\\n\".format(line_number, child)); }\n											indent = to!int(child.matches[0].length);\n											assert(indent <= last_indent+1, \"Excessive indent at line: %d (%d vs %d)\\n%s\".format(line_number, indent, last_indent, child));\n											decreased_indent = last_indent >= indent;\n											//last_indent = indent;\n											mustRecordIndent = true;\n										} else {\n											mustRecordIndent = false;\n										}\n										scope(exit) {\n											if (mustRecordIndent) {\n												last_indent = indent;\n											}\n											output ~= \"\\n\";\n											//writefln(\"Indents now: %s prev:%s\", indent, last_indent);\n										}\n\n										if (decreased_indent) {\n											//printClosingTags(output, cast(int)(indent - last_indent));\n										}\n\n\n\n\n							//output ~= \"child: name:%s firstmatch:%s numChildren:%s numMatches:%s\\n\".format(child.name, child.matches[0], child.children.length, child.matches.length);\n							renderToken(output, child);\n						} else {\n							output ~= \"child: name:%s numChildren:%s numMatches:%s\\n\".format(child.name, child.children.length, child.matches.length);\n						}\n					//}\n				}\n				output ~= \"\\n\";\n		}\n	}\n	ParseTree* nextLine() {\n		currentChild++;\n		skip++;\n		if (currentChild >= parent.children.length) {\n			return null;\n		}\n		return &parent.children[currentChild];\n	}\n\n\n	void renderLine(ref Appender!string output, ref ParseTree p) {\n		import std.array : appender;\n		line_number++;\n\n		if (in_block && indent < block_indent) {\n			in_block = false;\n			block_indent = 0;\n		}\n		if (p.isIndentedLine) {\n			// move to the actual content of the line;\n			p = p.children[1];\n		}\n		if (!p.children.length) {\n			output ~= \"%s: %s// empty line%s\".format(line_number, \"\\t\".replicate(last_indent), p.matches[0]);\n		} else {\n			switch(p.children[0].name) {\n				case \"Jade.Include\":\n					output ~= \"%d: %s\".format(line_number, renderInclude(p, line_number, indent));\n					break;\n				case \"Jade.Extend\":\n					output ~= \"%d: %s\".format(line_number, renderExtend(p, indent));\n					break;\n				case \"Jade.Block\":\n					output ~= \"%d: %s\".format(line_number, renderBlock(p, indent));\n					break;\n				case \"Jade.Conditional\":\n					output ~= \"%d: %s\".format(line_number, renderConditional(p, indent));\n					break;\n				case \"Jade.UnbufferedCode\":\n					output ~= \"%d: %s\".format(line_number, renderUnbufferedCode(p, indent));\n					break;\n				case \"Jade.BufferedCode\":\n					output ~= \"%d: %s\".format(line_number, renderBufferedCode(p, indent));\n					break;\n				case \"Jade.Iteration\":\n					output ~= \"%d: %s\".format(line_number, renderIteration(p, indent));\n					break;\n				case \"Jade.MixinDecl\":\n					output ~= \"%d: %s\".format(line_number, renderMixinDecl(p, indent));\n					break;\n				case \"Jade.Mixin\":\n					output ~= \"%d: %s\".format(line_number, renderMixin(p, indent));\n					break;\n				case \"Jade.Case\":\n					output ~= \"%d: %s\".format(line_number, renderCase(p, indent));\n					break;\n				case \"Jade.Tag\":\n					auto tag = renderTag(p, indent);\n					if (tag.id == \"doctype\") {\n						assert(0, \"doctype must be in first non-comment line of template\");\n					} else {\n						output ~= \"%d: %s%s%s\".format(line_number, \"\\t\".replicate(indent), tag.toHtml, tag.inlineText);\n						parents ~= tag.id;\n					}\n					//output ~= \"</%s>\".format(tag.id);\n					break;\n				case \"Jade.PipedText\":\n					output ~= \"%d: %s\".format(line_number, renderPipedText(p, indent));\n					break;\n				case \"Jade.Comment\":\n					if (p.matches[1] == \"-\") {\n						output ~= \"%d: // code comment\".format(line_number);\n					} else {\n						output ~= \"%d: %s\".format(line_number, renderComment(p, indent));\n					}\n					break;\n				case \"Jade.RawHtmlTag\":\n					output ~= \"%d: %s\".format(line_number, renderRawHtmlTag(p, indent));\n					break;\n				case \"Jade.Filter\":\n					output ~= \"%d: %s\".format(line_number, renderFilter(p, indent));\n					break;\n				case \"Jade.AnyContentLine\":\n					output ~= \"%d: %s\".format(line_number, renderAnyContentLine(p, indent));\n					break;\n				default:\n					if (indent) {\n						output ~= \"%d: %s%s:%s\".format(line_number, \"\\t\".replicate(indent), p.children[0].name, p.matches[0]);\n					} else {\n						output ~= \"%d: %s\".format(line_number, p.matches[0]);\n					}\n			}\n		}\n	}\n\n	string renderInclude(ParseTree p, ulong line_number, ulong indent) {\n		//return \"%sinclude %s// include file %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n		auto s = q{`, %d, %d); sink(import(\"%s\"), %d, %d); sink(`}.format(0, indent, p.matches[0], line_number, indent);\n		//return import(p.matches[0]);\n		//mixin(s);\n		return s;\n	}\n	string renderExtend(ParseTree p, ulong indent) {\n		//return \"%s %s // Extend %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n		return q{`, %d, %d); mixin(render!\"%s\"); sink(`}.format(0, indent, p.matches[1]);\n	}\n	string renderBlock(ParseTree p, ulong indent) {\n		//return \"%s %s // Block %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n		struct_output ~= \"string %s;\\n\".format(p.matches[1]);\n		return q{`);  { sink!(%s.%s)(`}.format(templateStruct, p.matches[1]);\n	}\n	string renderConditional(ParseTree p, ulong indent) {\n		return \"%s %s // Conditional %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderUnbufferedCode(ParseTree p, ulong indent) {\n		return \"%s %s // UnbufferedCode %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderBufferedCode(ParseTree p, ulong indent) {\n		return \"%s%s\".format(p.matches[0], p.matches[1]);\n	}\n	string renderIteration(ParseTree p, ulong indent) {\n		return \"%s %s // Iteration %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderMixinDecl(ParseTree p, ulong indent) {\n		return \"%s %s // MixinDecl %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderMixin(ParseTree p, ulong indent) {\n		return \"%s %s // Mixin %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderCase(ParseTree p, ulong indent) {\n		return \"%s %s // Case %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderTag(ParseTree p, ulong indent) {\n		return \"%s %s // Tag %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderPipedText(ParseTree p, ulong indent) {\n		return \"%s %s // PipedText %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderComment(ParseTree p, ulong indent) {\n		return \"%s %s // Comment %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderRawHtmlTag(ParseTree p, ulong indent) {\n		return \"%s %s // RawHtmlTag %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderFilter(ParseTree p, ulong indent) {\n		return \"%s %s // Filter %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderAnyContentLine(ParseTree p, ulong indent) {\n		return \"%s %s // AnyContentLine %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderStringInterpolation(ParseTree p, ulong indent) {\n		switch (p.matches[0]) {\n			case \"#{\":\n				return \"escape:%s // EscapedStringInterpolation\".format(p.matches[1..$]);\n			case \"#[\":\n				return \"tag:%s // TagInterpolation\".format(renderTag(p.children[0], indent));\n			case \"!{\":\n				return \"no-escape:%s // UnescapedStringInterpolation\".format(p.matches[1..$]);\n			default:\n				assert(0, \"Unrecognized StringInterpolation\");\n		}\n	}\n	struct Tag {\n		ulong indent;\n		bool hasBlock;\n		string _id;// = findParseTree(line, \"Jade.Id\", 2);\n		void id(string id) { _id = id; }\n		string id() { if (_id) return _id; return \"div\"; }\n		ParseTree blockInATag;\n		TagArgs tagArgs;\n		ParseTree cssId;\n		string[] cssClasses;\n		AndAttributes andAttributes;\n		string inlineText;\n		string toHtml() {\n			import std.string : join;\n			string[] attribs = [\"\"];\n			if (cssId.matches.length > 0) {\n				attribs ~= `id=\"%s\"`.format(cssId.matches[0]);\n			}\n			foreach (tagarg; tagArgs) {\n				if (tagarg.key.matches[0] == \"class\") {\n					return \"CLASS %s\".format(tagarg.value.matches);\n				}\n			}\n\n			return \"<%s%s>\".format(id(), attribs.length <=1 ? \"\" : attribs.join(\" \"));\n		}\n	}\n	Tag renderTag(ref ParseTree line, ulong indent) {\n		Tag tag;\n		tag.indent = indent;\n		tag.hasBlock = findParseTree(line, \"Jade.BlockInATag\") !is null;\n		string[] s;\n		auto childHolder = line.children[0];\n		if (line.name == \"Jade.InlineTag\" || line.name == \"Jade.TagInterpolate\") {\n			childHolder = line;\n		}\n		foreach (item; childHolder.children) {\n			switch (item.name) {\n				case \"Jade.Id\":\n					tag.id = item.matches[0];\n					s ~= \"id:\"~ tag.id;\n					break;\n				case \"Jade.BlockInATag\":\n					tag.blockInATag = item;\n					s ~= \"block:\"~ tag.blockInATag.name;\n					break;\n				case \"Jade.CssClass\":\n					tag.cssClasses ~= item.matches[0];\n					//s ~= \"cssClass:\"~ tag.cssClasses[$-1].matches[0];\n					break;\n				case \"Jade.CssId\":\n					tag.cssId = item;\n					s ~= \"cssId:\"~ tag.cssId.matches[0];\n					break;\n				case \"Jade.TagArgs\":\n					tag.tagArgs = TagArgs.parse(item);\n					s ~= \"tagArgs:%s\".format(tag.tagArgs);\n					break;\n				case \"Jade.BufferedCode\":\n					s ~= \"bufferedCode:%s\".format(renderBufferedCode(item, indent));\n					break;\n				case \"Jade.InlineText\":\n					tag.inlineText = item.matches[0];\n					s ~= \"inlineText:%s\".format(item.matches[0]);\n					assert(item.matches.length == 1, \"Surely inlineText should only have one match?\");\n					break;\n				case \"Jade.InlineTag\":\n					s ~= \"inlineTag:%s\".format(renderTag(item, indent));\n					break;\n				case \"Jade.SelfCloser\":\n					s ~= \"selfcloser:true\"; // we could put the automatica selfcloser for img, br, etc... by the Jade.Id detection above\n					break;\n				case \"Jade.AndAttributes\":\n					tag.andAttributes = AndAttributes.parse(item);\n					s ~= \"andAttributes:%s\".format(tag.andAttributes);\n					break;\n				case \"Jade.StringInterpolation\":\n					s ~= \"stringInterpolation:%s\".format(renderStringInterpolation(item, indent));\n					break;\n				default:\n					//id = &item;\n					s ~= \"default:\"~item.name;\n			}\n		}\n		//return \"%s:%s %s %s\".format(hasBlock?\"hasBlock\":\"\", indent, id is null ? \"(null)\" : \"id:[%s]\".format(*id), line.matches.length);\n		return tag;\n	}\n	struct AndAttributes {\n		string dexpression;\n		AndAttribute[] attribs;\n		static AndAttributes parse(ref ParseTree p) {\n			AndAttributes ret;\n			if (p.children[0].name == \"Jade.ParamDExpression\") {\n				ret.dexpression = p.children[0].matches[0];\n			} else {\n				assert(p.children[0].name == \"Jade.AttributeJsonObject\", \"Expected Jade.AttributeJsonObject got:%s\".format(p.children[0].name));\n				foreach (argtree; p.children[0].children) {\n					ret.attribs ~= AndAttribute.parse(argtree);\n				}\n			}\n			return ret;\n		}\n		string toString() {\n			import std.array : appender;\n			auto ret = appender!string;\n			if (attribs.length > 0) {\n				ret.reserve = 4096;\n				ret ~= attribs[0].toString;\n				foreach (attrib; attribs[1..$]) {\n					ret ~= \", \";\n					ret ~= attrib.toString;\n				}\n			} else {\n				return dexpression;\n			}\n\n			return ret.data;\n		}\n	}\n	struct AndAttribute {\n		ParseTree* key;\n		ParseTree* value;\n		static AndAttribute parse(ref ParseTree p) {\n			AndAttribute ret;\n			ret.key = &p.children[0];\n			ret.value = &p.children[1];\n			return ret;\n		}\n		string toString() {\n			return \"%s:%s\".format(key.matches[0], value.matches[0]);\n		}\n	}\n	struct TagArgs {\n		TagArg[] args;\n		alias args this;\n		static TagArgs parse(ref ParseTree p) {\n			TagArgs ret;\n			foreach (argtree; p.children) {\n				ret.args ~= TagArg.parse(argtree);\n			}\n			return ret;\n		}\n		string toString() {\n			import std.array : appender;\n			auto ret = appender!string;\n			if (args.length > 0) {\n				ret.reserve = 4096;\n				ret ~= args[0].toString;\n				foreach (arg; args[1..$]) {\n					ret ~= \", \";\n					ret ~= arg.toString;\n				}\n			}\n			return ret.data;\n		}\n		string toHtml() {\n			import std.array : appender;\n			auto ret = appender!string;\n			if (args.length > 0) {\n				ret.reserve = 1024;\n				foreach (arg; args) {\n					ret ~= \" \";\n					ret ~= arg.toHtml;\n				}\n			}\n			return ret.data;\n		}\n	}\n	struct TagArg {\n		ParseTree* key;\n		string assignType;\n		ParseTree* value;\n		static TagArg parse(ref ParseTree p) {\n			TagArg ret;\n			ret.key = &p.children[0];\n			if (p.children.length > 1) {\n				ret.assignType = p.children[1].matches[0];\n			}\n			if (p.children.length > 2) {\n				ret.value = &p.children[2];\n			}\n			return ret;\n		}\n		string getValue() {\n			import std.array : appender;\n			auto ret = appender!string;\n			auto type = value is null ? \"<null>\" : value.children[0].name;\n			ret.reserve = 1024;\n			switch (type) {\n			case \"Jade.Str\":\n				ret ~= '\"';\n				ret ~= value.matches[0];\n				ret ~= '\"';\n				return ret.data;\n			case \"Jade.ParamDExpression\":\n				return value.matches[0];\n			case \"Jade.AttributeJsonObject\":\n				assert(key.matches[0] == \"style\" || key.matches[0] == \"class\", \"AttributeJsonObject as parameter only supported for style tag parameter, not: \"~ key.matches[0]);\n				if (value.children[0].children.length > 0) {\n					ret ~= value.children[0].children[0].children[0].matches[0];\n					ret ~= '=';\n					ret ~= value.children[0].children[0].children[0].matches[0];\n					foreach (keyvalue; value.children[0].children[1..$]) {\n						ret ~= \",\";\n						ret ~= keyvalue.children[0].matches[0];\n						ret ~= '=';\n						ret ~= keyvalue.children[0].matches[0];\n					}\n				}\n				return ret.data;\n			case \"Jade.CssClassArray\":\n				if (value.children[0].children.length > 0) {\n					ret ~= value.children[0].children[0].matches[0];\n					foreach (clazz; value.children[0].children[1..$]) {\n						ret ~= \",\";\n						ret ~= clazz.matches[0];\n					}\n				}\n				return ret.data;\n			case \"<null>\":\n				return `\"\"`;\n			default:\n				assert(0, \"Unsupported value type: \"~ type ~\" for TagArg key:\"~ key.matches[0]);\n			}\n		}\n\n		string toString() {\n			return \"%s%s%s\".format(key.matches[0], assignType, value is null ? null : value.matches[0]);\n		}\n		string toHtml() {\n			return \"%s%s%s\".format(key.matches[0], assignType, getValue());\n		}\n	}\n}\n\nbool isIndentedLine(ParseTree p) {\n	if (p.children.length < 1 || p.name != \"Jade.Line\" || p.children[0].name != \"Jade.Indent\" || p.children[1].name != \"Jade.Line\") {\n		return false;\n	}\n	if (p.matches.length > 0 && p.children.length > 0 && p.matches[0][0]=='\\t') {\n		return true;\n	}\n	return false;\n}\n\nParseTree* findParseTree(ref ParseTree p, string name, int maxDepth=int.min) {\n	if (maxDepth != int.min && maxDepth < 0) return null;\n	if (p.name == name) {\n		return &p;\n	}\n	foreach (child; p.children) {\n		auto tmp = findParseTree(child, name, maxDepth-1);\n		if (tmp !is null) {\n			return tmp;\n		}\n	}\n	return null;\n}\n\n\n\n\n\n/**\n * Pre-process jade file, making pegged parser capable of understanding indented BlockInATag blocks\n */\nstring blockWrapJadeFile(string templ) {\n	import std.conv;\n	import std.algorithm : countUntil;\n	import std.array;\n	import std.string : split, strip, lineSplitter;\n	auto buf = appender!string;\n	buf.reserve(templ.length*2);\n\n	long last_indent;\n	long raw_indent;\n	bool isRawBlock;\n	foreach (line; templ.lineSplitter) {\n		if (line == \"}\") throw new Exception(\"Unexpected } on line by itself\"); // protect against accidental use of our special marker\n		auto indent = line.countUntil!\"a != 0x09\";\n		auto strippedLine = line.strip;\n		indent = indent < 0 ? 0 : indent;\n\n		//buf ~= to!string(indent);\n		if (line.length>0 && strippedLine[$-1]=='.' && indent <= raw_indent) {\n			if (isRawBlock) buf ~= \"}\\n\"; // if a raw block tag follows a raw block tag\n\n			buf ~= line;\n			buf ~= '{';\n			isRawBlock = true;\n			raw_indent = indent;\n		} else if (isRawBlock && indent <= raw_indent) {\n			buf ~= \"}\\n\";\n			isRawBlock = false;\n			buf ~= line;\n		} else {\n			buf ~= line;\n		}\n		buf ~= '\\n';\n		last_indent = indent;\n	}\n\n	return buf.data;\n}\nNode jadeToTree(ref ParseTree p) {\n	size_t index;\n	auto ret = Node(p.children[0].name);\n	jadeToTreeWorker(ret, p.children[0].children, index);\n	writeln(\"ret: \", ret);\n	return ret;\n}\nstruct Node {\n	string name;\n	string[] matches;\n	Node[] children;\n}\nvoid jadeToTreeWorker(ref Node parent, ParseTree[] lines, ref size_t index, int parent_depth = -1) {\n	writeln(\">>>>\");\n	while (index < lines.length-1) {\n		auto current = lines[index];\n		auto depth = cast(int)(current.matches.length > 0 && current.matches[0].length > 0 && current.matches[0][0] == '\\t' ? current.matches[0].length : 0);\n		if (depth <= parent_depth) {\n			return;\n		}\n		parent.children ~= Node(current.name, current.matches[0.. $ > 2 ? 2 : $]);\n		jadeToTreeWorker(parent.children[$-1], lines[index+1..$], index, depth);\n		index++;\n	}\n	//writeln(\"p::\", ret);\n}\n",
			"settings":
			{
				"buffer_size": 20304,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "old_base.d\nmodule jade.base;\n\nimport std.stdio;\nimport std.file;\nimport std.array : replicate;\n\nimport jade.pegged;\n\nimport std.conv : to;\n\nstring render(alias filename)() {\n	pragma(msg, \"compile time:\");\n	enum templ = import(filename);\n	enum tmp = blockWrapJadeFile(templ);\n	//return tmp;\n	enum parse_tree = Jade(tmp);\n	//pragma(msg, parse_tree);\n	enum result = renderParseTree(filename, parse_tree); // Should we use a different readParseTree function here? This is the last place I currently use enum...\n	return result;\n}\n\nvoid render(T)(T output_stream, string filename) {\n	auto templ = readText(\"views/\"~filename);\n	auto tmp = blockWrapJadeFile(templ);\n	auto parse_tree = Jade(tmp);\n	auto result = renderParseTree(filename, parse_tree);\n	//auto result = \"%s\".format(parse_tree);\n	output_stream.write(result);\n}\n\nimport pegged.parser;\nimport std.string : format;\nstring renderParseTree(string filename, ParseTree p) {\n	auto parser = new JadeParser(filename, p);\n	return parser.render().data;\n}\n\nstruct JadeParser {\n	import std.array : Appender, appender;\n	string filename;\n	ParseTree root;\n	ParseTree* parent; // the parent of the current children being processed\n\n	int last_indent, indent;\n	size_t line_number;\n	bool in_block;\n	size_t block_indent;\n	size_t skip; // the number of lines to skip in main loop\n	int currentChild; // the current child index into parent.children;\n	string[] parents;\n	auto render() {\n		auto output = appender!string;\n		output ~= \"sink(`\";\n		renderToken(output, root);\n		printClosingTags(output);\n		output ~= \"`, %s);\".format(line_number);\n		return output;\n	}\n\n	auto printClosingTags(ref Appender!string html, int diff=-1, string file=__FILE__, int line=__LINE__) {\n		if (parents.length <=0) return html;\n\n		if (diff<0) {\n			diff = cast(int)(last_indent - indent); // an equal indent is a un-indent of 1\n		}\n		if (diff == 0) {\n			diff = 1;\n		}\n		assert(diff <= parents.length, \"Too many indents: %s vs %s @%s:%d processing %s:%d\\n%s\".format(diff, parents.length, file, line, filename, line_number, parents));\n		for (auto i=diff; i > 0; i--) {\n			html ~= \"`); sink(`</%s>`,%d, %d); sink(`\".format(parents[$-1], line_number, indent-1);\n			parents = parents[0..$-1];\n		}\n		return html;\n	}\n	void renderToken(ref Appender!string output, ref ParseTree p) {\n		switch(p.name) {\n			case \"Jade.DocType\":\n				line_number++;\n				output ~= \"<!DOCTYPE %s>\".format(p.matches[0]);\n				break;\n			case \"Jade.Comment\":\n				line_number++;\n				break;\n			case \"Jade.Line\":\n				renderLine(output, p);\n				break;\n			default:\n				output ~= \"==========\\n\";\n				parent = &p;\n				currentChild = -1;\n				foreach (child; p.children) {\n					currentChild++;\n					if (skip) {\n						skip--;\n						continue;\n					}\n					//if (child.children.length > 0) {\n					//	output ~= \"-\"~child.name~\"-\";\n					//	output ~= renderParseTree(child);\n					//} else {\n						if (child.matches.length > 0) {\n\n\n								indent = 0;\n										bool decreased_indent, mustRecordIndent;\n										//writefln(\"indents: %s and %s\\t%s\", p.matches.length > 0, p.matches[0][0]=='\\t', p);\n										if (child.matches.length > 0 && child.matches[0][0]=='\\t') {\n											foreach (t; child.matches[0]) { assert(t == '\\t', \"All indents must be tabs at line: %d\\n\".format(line_number, child)); }\n											indent = to!int(child.matches[0].length);\n											assert(indent <= last_indent+1, \"Excessive indent at line: %d (%d vs %d)\\n%s\".format(line_number, indent, last_indent, child));\n											decreased_indent = last_indent >= indent;\n											//last_indent = indent;\n											mustRecordIndent = true;\n										} else {\n											mustRecordIndent = false;\n										}\n										scope(exit) {\n											if (mustRecordIndent) {\n												last_indent = indent;\n											}\n											output ~= \"\\n\";\n											//writefln(\"Indents now: %s prev:%s\", indent, last_indent);\n										}\n\n										if (decreased_indent) {\n											//printClosingTags(output, cast(int)(indent - last_indent));\n										}\n\n\n\n\n							//output ~= \"child: name:%s firstmatch:%s numChildren:%s numMatches:%s\\n\".format(child.name, child.matches[0], child.children.length, child.matches.length);\n							renderToken(output, child);\n						} else {\n							output ~= \"child: name:%s numChildren:%s numMatches:%s\\n\".format(child.name, child.children.length, child.matches.length);\n						}\n					//}\n				}\n				output ~= \"\\n\";\n		}\n	}\n	ParseTree* nextLine() {\n		currentChild++;\n		skip++;\n		if (currentChild >= parent.children.length) {\n			return null;\n		}\n		return &parent.children[currentChild];\n	}\n\n\n	void renderLine(ref Appender!string output, ref ParseTree p) {\n		import std.array : appender;\n		line_number++;\n\n		if (in_block && indent < block_indent) {\n			in_block = false;\n			block_indent = 0;\n		}\n		if (p.isIndentedLine) {\n			// move to the actual content of the line;\n			p = p.children[1];\n		}\n		if (!p.children.length) {\n			output ~= \"%s: %s// empty line%s\".format(line_number, \"\\t\".replicate(last_indent), p.matches[0]);\n		} else {\n			switch(p.children[0].name) {\n				case \"Jade.Include\":\n					output ~= \"%d: %s\".format(line_number, renderInclude(p, line_number, indent));\n					break;\n				case \"Jade.Extend\":\n					output ~= \"%d: %s\".format(line_number, renderExtend(p, indent));\n					break;\n				case \"Jade.Block\":\n					output ~= \"%d: %s\".format(line_number, renderBlock(p, indent));\n					break;\n				case \"Jade.Conditional\":\n					output ~= \"%d: %s\".format(line_number, renderConditional(p, indent));\n					break;\n				case \"Jade.UnbufferedCode\":\n					output ~= \"%d: %s\".format(line_number, renderUnbufferedCode(p, indent));\n					break;\n				case \"Jade.BufferedCode\":\n					output ~= \"%d: %s\".format(line_number, renderBufferedCode(p, indent));\n					break;\n				case \"Jade.Iteration\":\n					output ~= \"%d: %s\".format(line_number, renderIteration(p, indent));\n					break;\n				case \"Jade.MixinDecl\":\n					output ~= \"%d: %s\".format(line_number, renderMixinDecl(p, indent));\n					break;\n				case \"Jade.Mixin\":\n					output ~= \"%d: %s\".format(line_number, renderMixin(p, indent));\n					break;\n				case \"Jade.Case\":\n					output ~= \"%d: %s\".format(line_number, renderCase(p, indent));\n					break;\n				case \"Jade.Tag\":\n					auto tag = renderTag(p, indent);\n					if (tag.id == \"doctype\") {\n						assert(0, \"doctype must be in first non-comment line of template\");\n					} else {\n						output ~= \"%d: %s%s%s\".format(line_number, \"\\t\".replicate(indent), tag.toHtml, tag.inlineText);\n						parents ~= tag.id;\n					}\n					//output ~= \"</%s>\".format(tag.id);\n					break;\n				case \"Jade.PipedText\":\n					output ~= \"%d: %s\".format(line_number, renderPipedText(p, indent));\n					break;\n				case \"Jade.Comment\":\n					if (p.matches[1] == \"-\") {\n						output ~= \"%d: // code comment\".format(line_number);\n					} else {\n						output ~= \"%d: %s\".format(line_number, renderComment(p, indent));\n					}\n					break;\n				case \"Jade.RawHtmlTag\":\n					output ~= \"%d: %s\".format(line_number, renderRawHtmlTag(p, indent));\n					break;\n				case \"Jade.Filter\":\n					output ~= \"%d: %s\".format(line_number, renderFilter(p, indent));\n					break;\n				case \"Jade.AnyContentLine\":\n					output ~= \"%d: %s\".format(line_number, renderAnyContentLine(p, indent));\n					break;\n				default:\n					if (indent) {\n						output ~= \"%d: %s%s:%s\".format(line_number, \"\\t\".replicate(indent), p.children[0].name, p.matches[0]);\n					} else {\n						output ~= \"%d: %s\".format(line_number, p.matches[0]);\n					}\n			}\n		}\n	}\n\n	string renderInclude(ParseTree p, ulong line_number, ulong indent) {\n		//return \"%sinclude %s// include file %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n		auto s = q{`, %d, %d); sink(import(\"%s\"), %d, %d); sink(`}.format(0, indent, p.matches[0], line_number, indent);\n		//return import(p.matches[0]);\n		//mixin(s);\n		return s;\n	}\n	string renderExtend(ParseTree p, ulong indent) {\n		//return \"%s %s // Extend %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n		return q{`, %d, %d); mixin(render!\"%s\"); sink(`}.format(0, indent, p.matches[1]);\n	}\n	string renderBlock(ParseTree p, ulong indent) {\n		//return \"%s %s // Block %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n		return q{`); setBlock(\"%s\", `}.format(p.matches[1]);\n	}\n	string renderConditional(ParseTree p, ulong indent) {\n		return \"%s %s // Conditional %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderUnbufferedCode(ParseTree p, ulong indent) {\n		return \"%s %s // UnbufferedCode %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderBufferedCode(ParseTree p, ulong indent) {\n		return \"%s%s\".format(p.matches[0], p.matches[1]);\n	}\n	string renderIteration(ParseTree p, ulong indent) {\n		return \"%s %s // Iteration %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderMixinDecl(ParseTree p, ulong indent) {\n		return \"%s %s // MixinDecl %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderMixin(ParseTree p, ulong indent) {\n		return \"%s %s // Mixin %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderCase(ParseTree p, ulong indent) {\n		return \"%s %s // Case %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderTag(ParseTree p, ulong indent) {\n		return \"%s %s // Tag %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderPipedText(ParseTree p, ulong indent) {\n		return \"%s %s // PipedText %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderComment(ParseTree p, ulong indent) {\n		return \"%s %s // Comment %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderRawHtmlTag(ParseTree p, ulong indent) {\n		return \"%s %s // RawHtmlTag %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderFilter(ParseTree p, ulong indent) {\n		return \"%s %s // Filter %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderAnyContentLine(ParseTree p, ulong indent) {\n		return \"%s %s // AnyContentLine %s\".format(\"\\t\".replicate(indent), p.matches[0], p.matches);\n	}\n	string renderStringInterpolation(ParseTree p, ulong indent) {\n		switch (p.matches[0]) {\n			case \"#{\":\n				return \"escape:%s // EscapedStringInterpolation\".format(p.matches[1..$]);\n			case \"#[\":\n				return \"tag:%s // TagInterpolation\".format(renderTag(p.children[0], indent));\n			case \"!{\":\n				return \"no-escape:%s // UnescapedStringInterpolation\".format(p.matches[1..$]);\n			default:\n				assert(0, \"Unrecognized StringInterpolation\");\n		}\n	}\n	struct Tag {\n		ulong indent;\n		bool hasBlock;\n		string _id;// = findParseTree(line, \"Jade.Id\", 2);\n		void id(string id) { _id = id; }\n		string id() { if (_id) return _id; return \"div\"; }\n		ParseTree blockInATag;\n		TagArgs tagArgs;\n		ParseTree cssId;\n		string[] cssClasses;\n		AndAttributes andAttributes;\n		string inlineText;\n		string toHtml() {\n			import std.string : join;\n			string[] attribs = [\"\"];\n			if (cssId.matches.length > 0) {\n				attribs ~= `id=\"%s\"`.format(cssId.matches[0]);\n			}\n			foreach (tagarg; tagArgs) {\n				if (tagarg.key.matches[0] == \"class\") {\n					return \"CLASS %s\".format(tagarg.value.matches);\n				}\n			}\n\n			return \"<%s%s>\".format(id(), attribs.length <=1 ? \"\" : attribs.join(\" \"));\n		}\n	}\n	Tag renderTag(ref ParseTree line, ulong indent) {\n		Tag tag;\n		tag.indent = indent;\n		tag.hasBlock = findParseTree(line, \"Jade.BlockInATag\") !is null;\n		string[] s;\n		auto childHolder = line.children[0];\n		if (line.name == \"Jade.InlineTag\" || line.name == \"Jade.TagInterpolate\") {\n			childHolder = line;\n		}\n		foreach (item; childHolder.children) {\n			switch (item.name) {\n				case \"Jade.Id\":\n					tag.id = item.matches[0];\n					s ~= \"id:\"~ tag.id;\n					break;\n				case \"Jade.BlockInATag\":\n					tag.blockInATag = item;\n					s ~= \"block:\"~ tag.blockInATag.name;\n					break;\n				case \"Jade.CssClass\":\n					tag.cssClasses ~= item.matches[0];\n					//s ~= \"cssClass:\"~ tag.cssClasses[$-1].matches[0];\n					break;\n				case \"Jade.CssId\":\n					tag.cssId = item;\n					s ~= \"cssId:\"~ tag.cssId.matches[0];\n					break;\n				case \"Jade.TagArgs\":\n					tag.tagArgs = TagArgs.parse(item);\n					s ~= \"tagArgs:%s\".format(tag.tagArgs);\n					break;\n				case \"Jade.BufferedCode\":\n					s ~= \"bufferedCode:%s\".format(renderBufferedCode(item, indent));\n					break;\n				case \"Jade.InlineText\":\n					tag.inlineText = item.matches[0];\n					s ~= \"inlineText:%s\".format(item.matches[0]);\n					assert(item.matches.length == 1, \"Surely inlineText should only have one match?\");\n					break;\n				case \"Jade.InlineTag\":\n					s ~= \"inlineTag:%s\".format(renderTag(item, indent));\n					break;\n				case \"Jade.SelfCloser\":\n					s ~= \"selfcloser:true\"; // we could put the automatica selfcloser for img, br, etc... by the Jade.Id detection above\n					break;\n				case \"Jade.AndAttributes\":\n					tag.andAttributes = AndAttributes.parse(item);\n					s ~= \"andAttributes:%s\".format(tag.andAttributes);\n					break;\n				case \"Jade.StringInterpolation\":\n					s ~= \"stringInterpolation:%s\".format(renderStringInterpolation(item, indent));\n					break;\n				default:\n					//id = &item;\n					s ~= \"default:\"~item.name;\n			}\n		}\n		//return \"%s:%s %s %s\".format(hasBlock?\"hasBlock\":\"\", indent, id is null ? \"(null)\" : \"id:[%s]\".format(*id), line.matches.length);\n		return tag;\n	}\n	struct AndAttributes {\n		string dexpression;\n		AndAttribute[] attribs;\n		static AndAttributes parse(ref ParseTree p) {\n			AndAttributes ret;\n			if (p.children[0].name == \"Jade.ParamDExpression\") {\n				ret.dexpression = p.children[0].matches[0];\n			} else {\n				assert(p.children[0].name == \"Jade.AttributeJsonObject\", \"Expected Jade.AttributeJsonObject got:%s\".format(p.children[0].name));\n				foreach (argtree; p.children[0].children) {\n					ret.attribs ~= AndAttribute.parse(argtree);\n				}\n			}\n			return ret;\n		}\n		string toString() {\n			import std.array : appender;\n			auto ret = appender!string;\n			if (attribs.length > 0) {\n				ret.reserve = 4096;\n				ret ~= attribs[0].toString;\n				foreach (attrib; attribs[1..$]) {\n					ret ~= \", \";\n					ret ~= attrib.toString;\n				}\n			} else {\n				return dexpression;\n			}\n\n			return ret.data;\n		}\n	}\n	struct AndAttribute {\n		ParseTree* key;\n		ParseTree* value;\n		static AndAttribute parse(ref ParseTree p) {\n			AndAttribute ret;\n			ret.key = &p.children[0];\n			ret.value = &p.children[1];\n			return ret;\n		}\n		string toString() {\n			return \"%s:%s\".format(key.matches[0], value.matches[0]);\n		}\n	}\n	struct TagArgs {\n		TagArg[] args;\n		alias args this;\n		static TagArgs parse(ref ParseTree p) {\n			TagArgs ret;\n			foreach (argtree; p.children) {\n				ret.args ~= TagArg.parse(argtree);\n			}\n			return ret;\n		}\n		string toString() {\n			import std.array : appender;\n			auto ret = appender!string;\n			if (args.length > 0) {\n				ret.reserve = 4096;\n				ret ~= args[0].toString;\n				foreach (arg; args[1..$]) {\n					ret ~= \", \";\n					ret ~= arg.toString;\n				}\n			}\n			return ret.data;\n		}\n		string toHtml() {\n			import std.array : appender;\n			auto ret = appender!string;\n			if (args.length > 0) {\n				ret.reserve = 1024;\n				foreach (arg; args) {\n					ret ~= \" \";\n					ret ~= arg.toHtml;\n				}\n			}\n			return ret.data;\n		}\n	}\n	struct TagArg {\n		ParseTree* key;\n		string assignType;\n		ParseTree* value;\n		static TagArg parse(ref ParseTree p) {\n			TagArg ret;\n			ret.key = &p.children[0];\n			if (p.children.length > 1) {\n				ret.assignType = p.children[1].matches[0];\n			}\n			if (p.children.length > 2) {\n				ret.value = &p.children[2];\n			}\n			return ret;\n		}\n		string getValue() {\n			import std.array : appender;\n			auto ret = appender!string;\n			auto type = value is null ? \"<null>\" : value.children[0].name;\n			ret.reserve = 1024;\n			switch (type) {\n			case \"Jade.Str\":\n				ret ~= '\"';\n				ret ~= value.matches[0];\n				ret ~= '\"';\n				return ret.data;\n			case \"Jade.ParamDExpression\":\n				return value.matches[0];\n			case \"Jade.AttributeJsonObject\":\n				assert(key.matches[0] == \"style\" || key.matches[0] == \"class\", \"AttributeJsonObject as parameter only supported for style tag parameter, not: \"~ key.matches[0]);\n				if (value.children[0].children.length > 0) {\n					ret ~= value.children[0].children[0].children[0].matches[0];\n					ret ~= '=';\n					ret ~= value.children[0].children[0].children[0].matches[0];\n					foreach (keyvalue; value.children[0].children[1..$]) {\n						ret ~= \",\";\n						ret ~= keyvalue.children[0].matches[0];\n						ret ~= '=';\n						ret ~= keyvalue.children[0].matches[0];\n					}\n				}\n				return ret.data;\n			case \"Jade.CssClassArray\":\n				if (value.children[0].children.length > 0) {\n					ret ~= value.children[0].children[0].matches[0];\n					foreach (clazz; value.children[0].children[1..$]) {\n						ret ~= \",\";\n						ret ~= clazz.matches[0];\n					}\n				}\n				return ret.data;\n			case \"<null>\":\n				return `\"\"`;\n			default:\n				assert(0, \"Unsupported value type: \"~ type ~\" for TagArg key:\"~ key.matches[0]);\n			}\n		}\n\n		string toString() {\n			return \"%s%s%s\".format(key.matches[0], assignType, value is null ? null : value.matches[0]);\n		}\n		string toHtml() {\n			return \"%s%s%s\".format(key.matches[0], assignType, getValue());\n		}\n	}\n}\n\nbool isIndentedLine(ParseTree p) {\n	if (p.children.length < 1 || p.name != \"Jade.Line\" || p.children[0].name != \"Jade.Indent\" || p.children[1].name != \"Jade.Line\") {\n		return false;\n	}\n	if (p.matches.length > 0 && p.children.length > 0 && p.matches[0][0]=='\\t') {\n		return true;\n	}\n	return false;\n}\n\nParseTree* findParseTree(ref ParseTree p, string name, int maxDepth=int.min) {\n	if (maxDepth != int.min && maxDepth < 0) return null;\n	if (p.name == name) {\n		return &p;\n	}\n	foreach (child; p.children) {\n		auto tmp = findParseTree(child, name, maxDepth-1);\n		if (tmp !is null) {\n			return tmp;\n		}\n	}\n	return null;\n}\n\n\n\n\n\n/**\n * Pre-process jade file, making pegged parser capable of understanding indented BlockInATag blocks\n */\nstring blockWrapJadeFile(string templ) {\n	import std.conv;\n	import std.algorithm : countUntil;\n	import std.array;\n	import std.string : split, strip, lineSplitter;\n	auto buf = appender!string;\n	buf.reserve(templ.length*2);\n\n	long last_indent;\n	long raw_indent;\n	bool isRawBlock;\n	foreach (line; templ.lineSplitter) {\n		if (line == \"}\") throw new Exception(\"Unexpected } on line by itself\"); // protect against accidental use of our special marker\n		auto indent = line.countUntil!\"a != 0x09\";\n		auto strippedLine = line.strip;\n		indent = indent < 0 ? 0 : indent;\n\n		//buf ~= to!string(indent);\n		if (line.length>0 && strippedLine[$-1]=='.' && indent <= raw_indent) {\n			if (isRawBlock) buf ~= \"}\\n\"; // if a raw block tag follows a raw block tag\n\n			buf ~= line;\n			buf ~= '{';\n			isRawBlock = true;\n			raw_indent = indent;\n		} else if (isRawBlock && indent <= raw_indent) {\n			buf ~= \"}\\n\";\n			isRawBlock = false;\n			buf ~= line;\n		} else {\n			buf ~= line;\n		}\n		buf ~= '\\n';\n		last_indent = indent;\n	}\n\n	return buf.data;\n}",
			"settings":
			{
				"buffer_size": 18780,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<!DOCTYPE html>\n2:  <!--[if IE 8]> // RawHtmlTag [\"<!--[if IE 8]>\", \"\\n\"]\n3: CLASS [\"lt-ie9\"]\n4:  <![endif]--> // RawHtmlTag [\"<![endif]-->\", \"\\n\"]\n5: <html>\n6: 	<head>\n7: `); string  title = (`\n8: 			<title>Page Title Here\n9: 		<style>\n10: `, 0, 3); sink(import(\"style.css\"), 10, 3); sink(`\n11: 	<body>\n12: `); string  content = (`\n13: 			 // // Comment [\"//\", \" this is the displayed content\", \"\\n\"]\n14: 			<p>This is a paragraph\n15: 				  That continues on // PipedText [\" That continues on\", \"\\n\"]\n16: 				  multiple lines // PipedText [\" multiple lines\", \"\\n\"]\n17: 			<ul>\n18: 				<li>\n19: 			<div>\n20: 				<img>\n21: 	<woot id=\"content1\">asdf\n22: 		CLASS [\"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\"]asdfasdf\n23: 		CLASS [\"active\", \":\", \"currentUrl === \\\"/about\\\"\"]\n24:  - // UnbufferedCode [\"-\", \" var localhost = \\\"remotehost\\\"\", \"\\n\"]\n25:  - // UnbufferedCode [\"-\", \" var user = {}\", \"\\n\"]\n26:  if // Conditional [\"if\", \" \\\"localhost\\\" == host\", \"\\n\"]\n27: 	<div id=\"foo\">\n28: // code comment\n29:  else // Conditional [\"else\", \"\\n\"]\n30: 	<merrrt>\n31:  unless // Conditional [\"unless\", \" !user.isAnonymous\", \"\\n\"]\n32: 	<You>are logged in\n33: // code comment\n34: // code comment\n35: // code comment\n36:  } // AnyContentLine [\"}\", \"\\n\"]\n37: <ul>\n38: 	 each // Iteration [\"each\", \"val\", \",\", \"index\", \"in\", \"{1:'one',2:'two',3:'three'}\", \"\\n\"]\n39: 		<li>\n40:  while // Iteration [\"while\", \" n < 4\", \"\\n\"]\n41: 	<li>\n42: 	// empty line\n\n43:  - // UnbufferedCode [\"-\", \" var friends = 0\", \"\\n\"]\n44:  case // Case [\"case\", \" \", \"friends\", \"\\n\"]\n45: 	 when // Case [\"when\", \" 0\", \"\\n\"]\n46: 	 when // Case [\"when\", \" 1\", \"\\n\"]\n47: 		<p>you have very few friends\n48: 	 default // Case [\"default\", \":\", \"p\", \"you have \", \"#{\", \"friends\", \" friends\", \"\\n\"]\n49: // code comment\n50:  mixin // MixinDecl [\"mixin\", \"list\", \"\\n\"]\n51: 	<ul>\n52: 		<li>foo\n53: 		<li>bar\n54: 		<li>baz\n55: // code comment\n56:  + // Mixin [\"+\", \"list\", \"\\n\"]\n57:  + // Mixin [\"+\", \"list\", \"\\n\"]\n58:  mixin // MixinDecl [\"mixin\", \"pet\", \"(\", \"name\", \")\", \"\\n\"]\n59: 	<li>\n60: <ul>\n61: 	 + // Mixin [\"+\", \"pet\", \"(\", \"cat\", \")\", \"\\n\"]\n62: 	 + // Mixin [\"+\", \"pet\", \"(\", \"dog\", \")\", \"\\n\"]\n63: 	 + // Mixin [\"+\", \"pet\", \"(\", \"pig\", \")\", \"\\n\"]\n64:  mixin // MixinDecl [\"mixin\", \"article\", \"(\", \"title\", \")\", \"\\n\"]\n65: 	<div>\n66: 		<div>\n67: 			<h1>\n68: 			 if // Conditional [\"if\", \"block\", \"\\n\"]\n69: `); string \n = (`\n70: 			 else // Conditional [\"else\", \"\\n\"]\n71: 				<p>No content provided\n72: 				// empty line\n\n73:  + // Mixin [\"+\", \"article\", \"(\", \"'Hello world'\", \")\", \"\\n\"]\n74: 				// empty line\n\n75:  + // Mixin [\"+\", \"article\", \"(\", \"'Hello world'\", \")\", \"\\n\"]\n76: 	<p>This is my\n77: 	<p>Amazing article\n78:  mixin // MixinDecl [\"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\", \"\\n\"]\n79: // code comment\n80: 	CLASS [\"attributes.class\"]\n81:  + // Mixin [\"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\", \"\\n\"]\n82:  mixin // MixinDecl [\"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\", \"\\n\"]\n83: 	<a>\n84: 	// empty line\n\n85:  + // Mixin [\"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\", \"\\n\"]\n86:  mixin // MixinDecl [\"mixin\", \"list\", \"(\", \"id\", \",\", \"...\", \"items\", \")\", \"\\n\"]\n87: 	<ul>\n88: 		 each // Iteration [\"each\", \"item\", \"in\", \"items\", \"\\n\"]\n89: 			<li>\n90: 			// empty line\n\n91:  + // Mixin [\"+\", \"list\", \"(\", \"'my-list'\", \",\", \"1\", \",\", \"2\", \",\", \"3\", \",\", \"4\", \")\", \"\\n\"]\n92: 			// empty line\n\n93: <p>\n94: <p>\n95:  - // UnbufferedCode [\"-\", \" var msg = {toUpperCase: function () {}}\", \"\\n\"]\n96: <p> characters\n97: 			// empty line\n\n98: // code comment\n99: <asdf>\n",
			"settings":
			{
				"buffer_size": 3605,
				"line_ending": "Unix"
			}
		},
		{
			"file": "current_output.txt",
			"settings":
			{
				"buffer_size": 4637,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "runtime:\nJade [0, 2530][\"//\", \"-\", \" index.jade\", \"\\n\", \"//\", \"-\", \" extends ./base_layout.jade\", \"\\n\", \"\\n\", \"doctype\", \"html\", \"\\n\", \"<!--[if IE 8]>\", \"\\n\", \"html\", \"(\", \"lang\", \"=\", \"en\", \",\", \"class\", \"=\", \"lt-ie9\", \")\", \"\\n\", \"<![endif]-->\", \"\\n\", \"html\", \"(\", \"lang\", \"=\", \"en\", \")\", \"\\n\", \"\\t\", \"head\", \"\\n\", \"\\t\\t\", \"block\", \" title\", \"\\n\", \"\\t\\t\\t\", \"title\", \"Page Title Here\", \"\\n\", \"\\t\\t\\t\", \"style\", \"\\n\", \"\\t\\t\\t\\t\", \"style.css\", \"\\n\", \"\\t\", \"body\", \".\", \"base-css\", \"(\", \"ng-app\", \"=\", \"MyApp\", \",\", \"ng-controller\", \"=\", \"CtrlII\", \")\", \"\\n\", \"\\t\\t\", \"//\", \" this is the displayed content\", \"\\n\", \"\\t\\t\", \"p\", \"(\", \"id\", \"=\", \",\", \"p-form-hook\", \"=\", \"some_d_var ? \\\"yes\\\" :\\\"no\\\"\", \",\", \"marked\", \")\", \"This is a paragraph\", \"\\n\", \"\\t\\t\\t\", \" That continues on\", \"\\n\", \"\\t\\t\\t\", \" multiple lines\", \"\\n\", \"\\t\\t\", \"ul\", \"(\", \"isit\", \"=\", \"some_other_d_var == \\\"woot\\\"\", \")\", \"\\n\", \"\\t\\t\\t\", \"li\", \".\", \"one-css\", \".\", \"two-css\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \"!=\", \" clickme\", \"\\n\", \"\\t\\t\", \".\", \"img-holder\", \"\\n\", \"\\t\\t\\t\", \"img\", \".\", \"image\", \"(\", \"src\", \"=\", \"logo.gif\", \",\", \"style\", \"=\", \"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\", \")\", \"/\", \"\\n\", \"\\t\", \"woot\", \"content1\", \"asdf\", \"\\n\", \"\\t\\t\", \"woot2\", \"(\", \"class\", \"=\", \"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\", \")\", \"asdfasdf\", \"\\n\", \"\\t\\t\", \"woot3\", \"(\", \"class\", \"=\", \"active\", \":\", \"currentUrl === \\\"/about\\\"\", \")\", \"\\n\", \"-\", \" var localhost = \\\"remotehost\\\"\", \"\\n\", \"-\", \" var user = {}\", \"\\n\", \"if\", \" \\\"localhost\\\" == host\", \"\\n\", \"\\t\", \"div\", \"foo\", \"(\", \"data-bar\", \"=\", \"foo\", \",\", \"goot-one\", \")\", \"&\", \"attributes\", \"(\", \"data-foo\", \":\", \"\\\"bar\\\"\", \")\", \"\\n\", \"\\t\\t\", \"//\", \"-\", \" include:markdown ./includes/footer.jade\", \"\\n\", \"else\", \"\\n\", \"\\t\", \"merrrt\", \"\\n\", \"unless\", \" !user.isAnonymous\", \"\\n\", \"\\t\", \"You\", \"are logged in\", \"\\n\", \"//\", \"-\", \" :markdown\", \"\\n\", \"//\", \"-\", \" \\t### Markdown Need dedent support to parse this\", \"\\n\", \"//\", \"-\", \" \\tI often like including markdown documents.{\", \"\\n\", \"}\", \"\\n\", \"ul\", \"\\n\", \"\\t\", \"each\", \"val\", \",\", \"index\", \"in\", \"{1:'one',2:'two',3:'three'}\", \"\\n\", \"\\t\\t\", \"li\", \"=\", \" index + ': ' + val\", \"\\n\", \"while\", \" n < 4\", \"\\n\", \"\\t\", \"li\", \"=\", \" n++\", \"\\n\", \"\\n\", \"-\", \" var friends = 0\", \"\\n\", \"case\", \" \", \"friends\", \"\\n\", \"\\t\", \"when\", \" 0\", \"\\n\", \"\\t\", \"when\", \" 1\", \"\\n\", \"\\t\\t\", \"p\", \"you have very few friends\", \"\\n\", \"\\t\", \"default\", \":\", \"p\", \"you have \", \"#{friends}\", \" friends\", \"\\n\", \"//\", \"-\", \" Declaration\", \"\\n\", \"mixin\", \"list\", \"\\n\", \"\\t\", \"ul\", \"\\n\", \"\\t\\t\", \"li\", \"foo\", \"\\n\", \"\\t\\t\", \"li\", \"bar\", \"\\n\", \"\\t\\t\", \"li\", \"baz\", \"\\n\", \"//\", \"-\", \" Use\", \"\\n\", \"+\", \"list\", \"\\n\", \"+\", \"list\", \"\\n\", \"mixin\", \"pet\", \"(\", \"name\", \")\", \"\\n\", \"\\t\", \"li\", \".\", \"pet\", \"=\", \" name\", \"\\n\", \"ul\", \"\\n\", \"\\t\", \"+\", \"pet\", \"(\", \"cat\", \")\", \"\\n\", \"\\t\", \"+\", \"pet\", \"(\", \"dog\", \")\", \"\\n\", \"\\t\", \"+\", \"pet\", \"(\", \"pig\", \")\", \"\\n\", \"mixin\", \"article\", \"(\", \"title\", \")\", \"\\n\", \"\\t\", \".\", \"article\", \"\\n\", \"\\t\\t\", \".\", \"article-wrapper\", \"\\n\", \"\\t\\t\\t\", \"h1\", \"=\", \" title\", \"\\n\", \"\\t\\t\\t\", \"if\", \"block\", \"\\n\", \"\\t\\t\\t\\t\", \"block\", \"\\n\", \"\\t\\t\\t\", \"else\", \"\\n\", \"\\t\\t\\t\\t\", \"p\", \"No content provided\", \"\\n\", \"\\n\", \"+\", \"article\", \"(\", \"'Hello world'\", \")\", \"\\n\", \"\\n\", \"+\", \"article\", \"(\", \"'Hello world'\", \")\", \"\\n\", \"\\t\", \"p\", \"This is my\", \"\\n\", \"\\t\", \"p\", \"Amazing article\", \"\\n\", \"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\", \"\\n\", \"\\t\", \"//\", \"-\", \" attributes == {class: \\\"btn\\\"}\", \"\\n\", \"\\t\", \"a\", \"(\", \"class\", \"!=\", \"attributes.class\", \",\", \"href\", \"=\", \"href\", \")\", \"=\", \" name\", \"\\n\", \"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\", \"\\n\", \"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\", \"\\n\", \"\\t\", \"a\", \"(\", \"href\", \"=\", \"href\", \")\", \"&\", \"attributes\", \"(\", \"attributes\", \")\", \"=\", \" name\", \"\\n\", \"\\n\", \"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\", \"\\n\", \"mixin\", \"list\", \"(\", \"id\", \",\", \"...\", \"items\", \")\", \"\\n\", \"\\t\", \"ul\", \"(\", \"id\", \"=\", \"id\", \")\", \"\\n\", \"\\t\\t\", \"each\", \"item\", \"in\", \"items\", \"\\n\", \"\\t\\t\\t\", \"li\", \"=\", \" item\", \"\\n\", \"\\n\", \"+\", \"list\", \"(\", \"'my-list'\", \",\", \"1\", \",\", \"2\", \",\", \"3\", \",\", \"4\", \")\", \"\\n\", \"\\n\", \"p\", \"\\n\\tIf you take a look at this page's source #[span(woot) a(target=\\\"_blank\\\", href=\\\"https://github.com/jadejs/jade/blob/master/docs/views/reference/interpolation.jade\\\") on GitHub],\\n\\tyoull see several places where the tag interpolation operator is\\n\\tused like so.\\n\\t.quote // this is raw text so the .quote means nothing to jade\\n\\t\\tp Joel: !{riskyBusiness}\", \"\\n\", \"}\", \"\\n\", \"p\", \"\\n\\tThis is supposed to just be text inside a p tag.\", \"\\n\", \"}\", \"\\n\", \"-\", \" var msg = {toUpperCase: function () {}}\", \"\\n\", \"p\", \"This is \", \"#{msg.toUpperCase()}\", \" <- upper case characters\", \"\\n\", \"\\n\", \"//\", \"-\", \" Following is asdf, its the last tag\", \"\\n\", \"asdf\", \"\\n\"]\n +-Jade.RootTag [0, 2530][\"//\", \"-\", \" index.jade\", \"\\n\", \"//\", \"-\", \" extends ./base_layout.jade\", \"\\n\", \"\\n\", \"doctype\", \"html\", \"\\n\", \"<!--[if IE 8]>\", \"\\n\", \"html\", \"(\", \"lang\", \"=\", \"en\", \",\", \"class\", \"=\", \"lt-ie9\", \")\", \"\\n\", \"<![endif]-->\", \"\\n\", \"html\", \"(\", \"lang\", \"=\", \"en\", \")\", \"\\n\", \"\\t\", \"head\", \"\\n\", \"\\t\\t\", \"block\", \" title\", \"\\n\", \"\\t\\t\\t\", \"title\", \"Page Title Here\", \"\\n\", \"\\t\\t\\t\", \"style\", \"\\n\", \"\\t\\t\\t\\t\", \"style.css\", \"\\n\", \"\\t\", \"body\", \".\", \"base-css\", \"(\", \"ng-app\", \"=\", \"MyApp\", \",\", \"ng-controller\", \"=\", \"CtrlII\", \")\", \"\\n\", \"\\t\\t\", \"//\", \" this is the displayed content\", \"\\n\", \"\\t\\t\", \"p\", \"(\", \"id\", \"=\", \",\", \"p-form-hook\", \"=\", \"some_d_var ? \\\"yes\\\" :\\\"no\\\"\", \",\", \"marked\", \")\", \"This is a paragraph\", \"\\n\", \"\\t\\t\\t\", \" That continues on\", \"\\n\", \"\\t\\t\\t\", \" multiple lines\", \"\\n\", \"\\t\\t\", \"ul\", \"(\", \"isit\", \"=\", \"some_other_d_var == \\\"woot\\\"\", \")\", \"\\n\", \"\\t\\t\\t\", \"li\", \".\", \"one-css\", \".\", \"two-css\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \"!=\", \" clickme\", \"\\n\", \"\\t\\t\", \".\", \"img-holder\", \"\\n\", \"\\t\\t\\t\", \"img\", \".\", \"image\", \"(\", \"src\", \"=\", \"logo.gif\", \",\", \"style\", \"=\", \"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\", \")\", \"/\", \"\\n\", \"\\t\", \"woot\", \"content1\", \"asdf\", \"\\n\", \"\\t\\t\", \"woot2\", \"(\", \"class\", \"=\", \"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\", \")\", \"asdfasdf\", \"\\n\", \"\\t\\t\", \"woot3\", \"(\", \"class\", \"=\", \"active\", \":\", \"currentUrl === \\\"/about\\\"\", \")\", \"\\n\", \"-\", \" var localhost = \\\"remotehost\\\"\", \"\\n\", \"-\", \" var user = {}\", \"\\n\", \"if\", \" \\\"localhost\\\" == host\", \"\\n\", \"\\t\", \"div\", \"foo\", \"(\", \"data-bar\", \"=\", \"foo\", \",\", \"goot-one\", \")\", \"&\", \"attributes\", \"(\", \"data-foo\", \":\", \"\\\"bar\\\"\", \")\", \"\\n\", \"\\t\\t\", \"//\", \"-\", \" include:markdown ./includes/footer.jade\", \"\\n\", \"else\", \"\\n\", \"\\t\", \"merrrt\", \"\\n\", \"unless\", \" !user.isAnonymous\", \"\\n\", \"\\t\", \"You\", \"are logged in\", \"\\n\", \"//\", \"-\", \" :markdown\", \"\\n\", \"//\", \"-\", \" \\t### Markdown Need dedent support to parse this\", \"\\n\", \"//\", \"-\", \" \\tI often like including markdown documents.{\", \"\\n\", \"}\", \"\\n\", \"ul\", \"\\n\", \"\\t\", \"each\", \"val\", \",\", \"index\", \"in\", \"{1:'one',2:'two',3:'three'}\", \"\\n\", \"\\t\\t\", \"li\", \"=\", \" index + ': ' + val\", \"\\n\", \"while\", \" n < 4\", \"\\n\", \"\\t\", \"li\", \"=\", \" n++\", \"\\n\", \"\\n\", \"-\", \" var friends = 0\", \"\\n\", \"case\", \" \", \"friends\", \"\\n\", \"\\t\", \"when\", \" 0\", \"\\n\", \"\\t\", \"when\", \" 1\", \"\\n\", \"\\t\\t\", \"p\", \"you have very few friends\", \"\\n\", \"\\t\", \"default\", \":\", \"p\", \"you have \", \"#{friends}\", \" friends\", \"\\n\", \"//\", \"-\", \" Declaration\", \"\\n\", \"mixin\", \"list\", \"\\n\", \"\\t\", \"ul\", \"\\n\", \"\\t\\t\", \"li\", \"foo\", \"\\n\", \"\\t\\t\", \"li\", \"bar\", \"\\n\", \"\\t\\t\", \"li\", \"baz\", \"\\n\", \"//\", \"-\", \" Use\", \"\\n\", \"+\", \"list\", \"\\n\", \"+\", \"list\", \"\\n\", \"mixin\", \"pet\", \"(\", \"name\", \")\", \"\\n\", \"\\t\", \"li\", \".\", \"pet\", \"=\", \" name\", \"\\n\", \"ul\", \"\\n\", \"\\t\", \"+\", \"pet\", \"(\", \"cat\", \")\", \"\\n\", \"\\t\", \"+\", \"pet\", \"(\", \"dog\", \")\", \"\\n\", \"\\t\", \"+\", \"pet\", \"(\", \"pig\", \")\", \"\\n\", \"mixin\", \"article\", \"(\", \"title\", \")\", \"\\n\", \"\\t\", \".\", \"article\", \"\\n\", \"\\t\\t\", \".\", \"article-wrapper\", \"\\n\", \"\\t\\t\\t\", \"h1\", \"=\", \" title\", \"\\n\", \"\\t\\t\\t\", \"if\", \"block\", \"\\n\", \"\\t\\t\\t\\t\", \"block\", \"\\n\", \"\\t\\t\\t\", \"else\", \"\\n\", \"\\t\\t\\t\\t\", \"p\", \"No content provided\", \"\\n\", \"\\n\", \"+\", \"article\", \"(\", \"'Hello world'\", \")\", \"\\n\", \"\\n\", \"+\", \"article\", \"(\", \"'Hello world'\", \")\", \"\\n\", \"\\t\", \"p\", \"This is my\", \"\\n\", \"\\t\", \"p\", \"Amazing article\", \"\\n\", \"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\", \"\\n\", \"\\t\", \"//\", \"-\", \" attributes == {class: \\\"btn\\\"}\", \"\\n\", \"\\t\", \"a\", \"(\", \"class\", \"!=\", \"attributes.class\", \",\", \"href\", \"=\", \"href\", \")\", \"=\", \" name\", \"\\n\", \"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\", \"\\n\", \"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\", \"\\n\", \"\\t\", \"a\", \"(\", \"href\", \"=\", \"href\", \")\", \"&\", \"attributes\", \"(\", \"attributes\", \")\", \"=\", \" name\", \"\\n\", \"\\n\", \"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\", \"\\n\", \"mixin\", \"list\", \"(\", \"id\", \",\", \"...\", \"items\", \")\", \"\\n\", \"\\t\", \"ul\", \"(\", \"id\", \"=\", \"id\", \")\", \"\\n\", \"\\t\\t\", \"each\", \"item\", \"in\", \"items\", \"\\n\", \"\\t\\t\\t\", \"li\", \"=\", \" item\", \"\\n\", \"\\n\", \"+\", \"list\", \"(\", \"'my-list'\", \",\", \"1\", \",\", \"2\", \",\", \"3\", \",\", \"4\", \")\", \"\\n\", \"\\n\", \"p\", \"\\n\\tIf you take a look at this page's source #[span(woot) a(target=\\\"_blank\\\", href=\\\"https://github.com/jadejs/jade/blob/master/docs/views/reference/interpolation.jade\\\") on GitHub],\\n\\tyoull see several places where the tag interpolation operator is\\n\\tused like so.\\n\\t.quote // this is raw text so the .quote means nothing to jade\\n\\t\\tp Joel: !{riskyBusiness}\", \"\\n\", \"}\", \"\\n\", \"p\", \"\\n\\tThis is supposed to just be text inside a p tag.\", \"\\n\", \"}\", \"\\n\", \"-\", \" var msg = {toUpperCase: function () {}}\", \"\\n\", \"p\", \"This is \", \"#{msg.toUpperCase()}\", \" <- upper case characters\", \"\\n\", \"\\n\", \"//\", \"-\", \" Following is asdf, its the last tag\", \"\\n\", \"asdf\", \"\\n\"]\n    +-Jade.Line [0, 15][\"//\", \"-\", \" index.jade\", \"\\n\"]\n    |  +-Jade.Comment [0, 14][\"//\", \"-\", \" index.jade\"]\n    |     +-literal!(\"-\") [2, 3][\"-\"]\n    |     +-Jade.InlineText [3, 14][\" index.jade\"]\n    +-Jade.Line [15, 46][\"//\", \"-\", \" extends ./base_layout.jade\", \"\\n\"]\n    |  +-Jade.Comment [15, 45][\"//\", \"-\", \" extends ./base_layout.jade\"]\n    |     +-literal!(\"-\") [17, 18][\"-\"]\n    |     +-Jade.InlineText [18, 45][\" extends ./base_layout.jade\"]\n    +-Jade.Line [46, 47][\"\\n\"]\n    +-Jade.Line [47, 60][\"doctype\", \"html\", \"\\n\"]\n    |  +-Jade.Tag [47, 59][\"doctype\", \"html\"]\n    |     +-Jade.Id [47, 54][\"doctype\"]\n    |     +-Jade.InlineText [55, 59][\"html\"]\n    +-Jade.Line [60, 75][\"<!--[if IE 8]>\", \"\\n\"]\n    |  +-Jade.RawHtmlTag [60, 74][\"<!--[if IE 8]>\"]\n    +-Jade.Line [75, 107][\"html\", \"(\", \"lang\", \"=\", \"en\", \",\", \"class\", \"=\", \"lt-ie9\", \")\", \"\\n\"]\n    |  +-Jade.Tag [75, 106][\"html\", \"(\", \"lang\", \"=\", \"en\", \",\", \"class\", \"=\", \"lt-ie9\", \")\"]\n    |     +-Jade.Id [75, 79][\"html\"]\n    |     +-Jade.TagArgs [79, 106][\"(\", \"lang\", \"=\", \"en\", \",\", \"class\", \"=\", \"lt-ie9\", \")\"]\n    |        +-Jade.TagArg [80, 89][\"lang\", \"=\", \"en\"]\n    |        |  +-Jade.TagParamKey [80, 84][\"lang\"]\n    |        |  +-keywords!(\"=\", \"!=\") [84, 85][\"=\"]\n    |        |  +-Jade.TagParamValue [85, 89][\"en\"]\n    |        |     +-Jade.Str [85, 89][\"en\"]\n    |        +-Jade.TagArg [91, 105][\"class\", \"=\", \"lt-ie9\"]\n    |           +-Jade.TagParamKey [91, 96][\"class\"]\n    |           +-keywords!(\"=\", \"!=\") [96, 97][\"=\"]\n    |           +-Jade.TagParamValue [97, 105][\"lt-ie9\"]\n    |              +-Jade.Str [97, 105][\"lt-ie9\"]\n    +-Jade.Line [107, 120][\"<![endif]-->\", \"\\n\"]\n    |  +-Jade.RawHtmlTag [107, 119][\"<![endif]-->\"]\n    +-Jade.Line [120, 136][\"html\", \"(\", \"lang\", \"=\", \"en\", \")\", \"\\n\"]\n    |  +-Jade.Tag [120, 135][\"html\", \"(\", \"lang\", \"=\", \"en\", \")\"]\n    |     +-Jade.Id [120, 124][\"html\"]\n    |     +-Jade.TagArgs [124, 135][\"(\", \"lang\", \"=\", \"en\", \")\"]\n    |        +-Jade.TagArg [125, 134][\"lang\", \"=\", \"en\"]\n    |           +-Jade.TagParamKey [125, 129][\"lang\"]\n    |           +-keywords!(\"=\", \"!=\") [129, 130][\"=\"]\n    |           +-Jade.TagParamValue [130, 134][\"en\"]\n    |              +-Jade.Str [130, 134][\"en\"]\n    +-Jade.Line [136, 142][\"\\t\", \"head\", \"\\n\"]\n    |  +-Jade.Indent [136, 137][\"\\t\"]\n    |  +-Jade.Line [137, 142][\"head\", \"\\n\"]\n    |     +-Jade.Tag [137, 141][\"head\"]\n    |        +-Jade.Id [137, 141][\"head\"]\n    +-Jade.Line [142, 156][\"\\t\\t\", \"block\", \" title\", \"\\n\"]\n    |  +-Jade.Indent [142, 144][\"\\t\\t\"]\n    |  +-Jade.Line [144, 156][\"block\", \" title\", \"\\n\"]\n    |     +-Jade.Block [144, 155][\"block\", \" title\"]\n    |        +-Jade.DLineExpression [149, 155][\" title\"]\n    +-Jade.Line [156, 181][\"\\t\\t\\t\", \"title\", \"Page Title Here\", \"\\n\"]\n    |  +-Jade.Indent [156, 159][\"\\t\\t\\t\"]\n    |  +-Jade.Line [159, 181][\"title\", \"Page Title Here\", \"\\n\"]\n    |     +-Jade.Tag [159, 180][\"title\", \"Page Title Here\"]\n    |        +-Jade.Id [159, 164][\"title\"]\n    |        +-Jade.InlineText [165, 180][\"Page Title Here\"]\n    +-Jade.Line [181, 190][\"\\t\\t\\t\", \"style\", \"\\n\"]\n    |  +-Jade.Indent [181, 184][\"\\t\\t\\t\"]\n    |  +-Jade.Line [184, 190][\"style\", \"\\n\"]\n    |     +-Jade.Tag [184, 189][\"style\"]\n    |        +-Jade.Id [184, 189][\"style\"]\n    +-Jade.Line [190, 212][\"\\t\\t\\t\\t\", \"style.css\", \"\\n\"]\n    |  +-Jade.Indent [190, 194][\"\\t\\t\\t\\t\"]\n    |  +-Jade.Line [194, 212][\"style.css\", \"\\n\"]\n    |     +-Jade.Include [194, 211][\"style.css\"]\n    |        +-Jade.FileName [202, 211][\"style.css\"]\n    +-Jade.Line [212, 267][\"\\t\", \"body\", \".\", \"base-css\", \"(\", \"ng-app\", \"=\", \"MyApp\", \",\", \"ng-controller\", \"=\", \"CtrlII\", \")\", \"\\n\"]\n    |  +-Jade.Indent [212, 213][\"\\t\"]\n    |  +-Jade.Line [213, 267][\"body\", \".\", \"base-css\", \"(\", \"ng-app\", \"=\", \"MyApp\", \",\", \"ng-controller\", \"=\", \"CtrlII\", \")\", \"\\n\"]\n    |     +-Jade.Tag [213, 266][\"body\", \".\", \"base-css\", \"(\", \"ng-app\", \"=\", \"MyApp\", \",\", \"ng-controller\", \"=\", \"CtrlII\", \")\"]\n    |        +-Jade.Id [213, 217][\"body\"]\n    |        +-Jade.CssClass [218, 226][\"base-css\"]\n    |        +-Jade.TagArgs [226, 266][\"(\", \"ng-app\", \"=\", \"MyApp\", \",\", \"ng-controller\", \"=\", \"CtrlII\", \")\"]\n    |           +-Jade.TagArg [227, 241][\"ng-app\", \"=\", \"MyApp\"]\n    |           |  +-Jade.TagParamKey [227, 233][\"ng-app\"]\n    |           |  +-keywords!(\"=\", \"!=\") [233, 234][\"=\"]\n    |           |  +-Jade.TagParamValue [234, 241][\"MyApp\"]\n    |           |     +-Jade.Str [234, 241][\"MyApp\"]\n    |           +-Jade.TagArg [243, 265][\"ng-controller\", \"=\", \"CtrlII\"]\n    |              +-Jade.TagParamKey [243, 256][\"ng-controller\"]\n    |              +-keywords!(\"=\", \"!=\") [256, 257][\"=\"]\n    |              +-Jade.TagParamValue [257, 265][\"CtrlII\"]\n    |                 +-Jade.Str [257, 265][\"CtrlII\"]\n    +-Jade.Line [267, 302][\"\\t\\t\", \"//\", \" this is the displayed content\", \"\\n\"]\n    |  +-Jade.Indent [267, 269][\"\\t\\t\"]\n    |  +-Jade.Line [269, 302][\"//\", \" this is the displayed content\", \"\\n\"]\n    |     +-Jade.Comment [269, 301][\"//\", \" this is the displayed content\"]\n    |        +-Jade.InlineText [271, 301][\" this is the displayed content\"]\n    +-Jade.Line [302, 379][\"\\t\\t\", \"p\", \"(\", \"id\", \"=\", \",\", \"p-form-hook\", \"=\", \"some_d_var ? \\\"yes\\\" :\\\"no\\\"\", \",\", \"marked\", \")\", \"This is a paragraph\", \"\\n\"]\n    |  +-Jade.Indent [302, 304][\"\\t\\t\"]\n    |  +-Jade.Line [304, 379][\"p\", \"(\", \"id\", \"=\", \",\", \"p-form-hook\", \"=\", \"some_d_var ? \\\"yes\\\" :\\\"no\\\"\", \",\", \"marked\", \")\", \"This is a paragraph\", \"\\n\"]\n    |     +-Jade.Tag [304, 378][\"p\", \"(\", \"id\", \"=\", \",\", \"p-form-hook\", \"=\", \"some_d_var ? \\\"yes\\\" :\\\"no\\\"\", \",\", \"marked\", \")\", \"This is a paragraph\"]\n    |        +-Jade.Id [304, 305][\"p\"]\n    |        +-Jade.TagArgs [305, 358][\"(\", \"id\", \"=\", \",\", \"p-form-hook\", \"=\", \"some_d_var ? \\\"yes\\\" :\\\"no\\\"\", \",\", \"marked\", \")\"]\n    |        |  +-Jade.TagArg [306, 311][\"id\", \"=\"]\n    |        |  |  +-Jade.TagParamKey [306, 308][\"id\"]\n    |        |  |  +-keywords!(\"=\", \"!=\") [308, 309][\"=\"]\n    |        |  +-Jade.TagArg [313, 349][\"p-form-hook\", \"=\", \"some_d_var ? \\\"yes\\\" :\\\"no\\\"\"]\n    |        |  |  +-Jade.TagParamKey [313, 324][\"p-form-hook\"]\n    |        |  |  +-keywords!(\"=\", \"!=\") [324, 325][\"=\"]\n    |        |  |  +-Jade.TagParamValue [325, 349][\"some_d_var ? \\\"yes\\\" :\\\"no\\\"\"]\n    |        |  |     +-Jade.ParamDExpression [325, 349][\"some_d_var ? \\\"yes\\\" :\\\"no\\\"\"]\n    |        |  +-Jade.TagArg [351, 357][\"marked\"]\n    |        |     +-Jade.TagParamKey [351, 357][\"marked\"]\n    |        +-Jade.InlineText [359, 378][\"This is a paragraph\"]\n    +-Jade.Line [379, 402][\"\\t\\t\\t\", \" That continues on\", \"\\n\"]\n    |  +-Jade.Indent [379, 382][\"\\t\\t\\t\"]\n    |  +-Jade.Line [382, 402][\" That continues on\", \"\\n\"]\n    |     +-Jade.PipedText [382, 401][\" That continues on\"]\n    +-Jade.Line [402, 422][\"\\t\\t\\t\", \" multiple lines\", \"\\n\"]\n    |  +-Jade.Indent [402, 405][\"\\t\\t\\t\"]\n    |  +-Jade.Line [405, 422][\" multiple lines\", \"\\n\"]\n    |     +-Jade.PipedText [405, 421][\" multiple lines\"]\n    +-Jade.Line [422, 460][\"\\t\\t\", \"ul\", \"(\", \"isit\", \"=\", \"some_other_d_var == \\\"woot\\\"\", \")\", \"\\n\"]\n    |  +-Jade.Indent [422, 424][\"\\t\\t\"]\n    |  +-Jade.Line [424, 460][\"ul\", \"(\", \"isit\", \"=\", \"some_other_d_var == \\\"woot\\\"\", \")\", \"\\n\"]\n    |     +-Jade.Tag [424, 459][\"ul\", \"(\", \"isit\", \"=\", \"some_other_d_var == \\\"woot\\\"\", \")\"]\n    |        +-Jade.Id [424, 426][\"ul\"]\n    |        +-Jade.TagArgs [426, 459][\"(\", \"isit\", \"=\", \"some_other_d_var == \\\"woot\\\"\", \")\"]\n    |           +-Jade.TagArg [427, 458][\"isit\", \"=\", \"some_other_d_var == \\\"woot\\\"\"]\n    |              +-Jade.TagParamKey [427, 431][\"isit\"]\n    |              +-keywords!(\"=\", \"!=\") [431, 432][\"=\"]\n    |              +-Jade.TagParamValue [432, 458][\"some_other_d_var == \\\"woot\\\"\"]\n    |                 +-Jade.ParamDExpression [432, 458][\"some_other_d_var == \\\"woot\\\"\"]\n    +-Jade.Line [460, 520][\"\\t\\t\\t\", \"li\", \".\", \"one-css\", \".\", \"two-css\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \"!=\", \" clickme\", \"\\n\"]\n    |  +-Jade.Indent [460, 463][\"\\t\\t\\t\"]\n    |  +-Jade.Line [463, 520][\"li\", \".\", \"one-css\", \".\", \"two-css\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \"!=\", \" clickme\", \"\\n\"]\n    |     +-Jade.Tag [463, 519][\"li\", \".\", \"one-css\", \".\", \"two-css\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\", \"!=\", \" clickme\"]\n    |        +-Jade.Id [463, 465][\"li\"]\n    |        +-Jade.CssClass [466, 473][\"one-css\"]\n    |        +-Jade.CssClass [474, 481][\"two-css\"]\n    |        +-Jade.InlineTag [481, 495][\":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\"]\n    |        |  +-Jade.Id [483, 484][\"a\"]\n    |        |  +-Jade.TagArgs [484, 495][\"(\", \"href\", \"!=\", \"#\", \")\"]\n    |        |     +-Jade.TagArg [485, 494][\"href\", \"!=\", \"#\"]\n    |        |        +-Jade.TagParamKey [485, 489][\"href\"]\n    |        |        +-keywords!(\"=\", \"!=\") [489, 491][\"!=\"]\n    |        |        +-Jade.TagParamValue [491, 494][\"#\"]\n    |        |           +-Jade.Str [491, 494][\"#\"]\n    |        +-Jade.InlineTag [495, 509][\":\", \"a\", \"(\", \"href\", \"!=\", \"#\", \")\"]\n    |        |  +-Jade.Id [497, 498][\"a\"]\n    |        |  +-Jade.TagArgs [498, 509][\"(\", \"href\", \"!=\", \"#\", \")\"]\n    |        |     +-Jade.TagArg [499, 508][\"href\", \"!=\", \"#\"]\n    |        |        +-Jade.TagParamKey [499, 503][\"href\"]\n    |        |        +-keywords!(\"=\", \"!=\") [503, 505][\"!=\"]\n    |        |        +-Jade.TagParamValue [505, 508][\"#\"]\n    |        |           +-Jade.Str [505, 508][\"#\"]\n    |        +-Jade.BufferedCode [509, 519][\"!=\", \" clickme\"]\n    |           +-keywords!(\"=\", \"!=\") [509, 511][\"!=\"]\n    |           +-Jade.DLineExpression [511, 519][\" clickme\"]\n    +-Jade.Line [520, 534][\"\\t\\t\", \".\", \"img-holder\", \"\\n\"]\n    |  +-Jade.Indent [520, 522][\"\\t\\t\"]\n    |  +-Jade.Line [522, 534][\".\", \"img-holder\", \"\\n\"]\n    |     +-Jade.Tag [522, 533][\".\", \"img-holder\"]\n    |        +-Jade.CssClass [523, 533][\"img-holder\"]\n    +-Jade.Line [534, 607][\"\\t\\t\\t\", \"img\", \".\", \"image\", \"(\", \"src\", \"=\", \"logo.gif\", \",\", \"style\", \"=\", \"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\", \")\", \"/\", \"\\n\"]\n    |  +-Jade.Indent [534, 537][\"\\t\\t\\t\"]\n    |  +-Jade.Line [537, 607][\"img\", \".\", \"image\", \"(\", \"src\", \"=\", \"logo.gif\", \",\", \"style\", \"=\", \"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\", \")\", \"/\", \"\\n\"]\n    |     +-Jade.Tag [537, 606][\"img\", \".\", \"image\", \"(\", \"src\", \"=\", \"logo.gif\", \",\", \"style\", \"=\", \"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\", \")\", \"/\"]\n    |        +-Jade.Id [537, 540][\"img\"]\n    |        +-Jade.CssClass [541, 546][\"image\"]\n    |        +-Jade.TagArgs [546, 605][\"(\", \"src\", \"=\", \"logo.gif\", \",\", \"style\", \"=\", \"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\", \")\"]\n    |        |  +-Jade.TagArg [547, 561][\"src\", \"=\", \"logo.gif\"]\n    |        |  |  +-Jade.TagParamKey [547, 550][\"src\"]\n    |        |  |  +-keywords!(\"=\", \"!=\") [550, 551][\"=\"]\n    |        |  |  +-Jade.TagParamValue [551, 561][\"logo.gif\"]\n    |        |  |     +-Jade.Str [551, 561][\"logo.gif\"]\n    |        |  +-Jade.TagArg [563, 604][\"style\", \"=\", \"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\"]\n    |        |     +-Jade.TagParamKey [563, 568][\"style\"]\n    |        |     +-keywords!(\"=\", \"!=\") [568, 569][\"=\"]\n    |        |     +-Jade.TagParamValue [569, 604][\"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\"]\n    |        |        +-Jade.AttributeJsonObject [569, 604][\"background\", \":\", \"\\\"red\\\"\", \"padding\", \":\", \"\\\"0px\\\"\"]\n    |        |           +-Jade.JsonKeyValue [570, 587][\"background\", \":\", \"\\\"red\\\"\"]\n    |        |           |  +-Jade.JsonKey [570, 580][\"background\"]\n    |        |           |  +-Jade.JsonObjectDExpression [582, 587][\"\\\"red\\\"\"]\n    |        |           +-Jade.JsonKeyValue [589, 603][\"padding\", \":\", \"\\\"0px\\\"\"]\n    |        |              +-Jade.JsonKey [589, 596][\"padding\"]\n    |        |              +-Jade.JsonObjectDExpression [598, 603][\"\\\"0px\\\"\"]\n    |        +-Jade.SelfCloser [605, 606][\"/\"]\n    +-Jade.Line [607, 627][\"\\t\", \"woot\", \"content1\", \"asdf\", \"\\n\"]\n    |  +-Jade.Indent [607, 608][\"\\t\"]\n    |  +-Jade.Line [608, 627][\"woot\", \"content1\", \"asdf\", \"\\n\"]\n    |     +-Jade.Tag [608, 626][\"woot\", \"content1\", \"asdf\"]\n    |        +-Jade.Id [608, 612][\"woot\"]\n    |        +-Jade.CssId [612, 621][\"content1\"]\n    |        +-Jade.InlineText [622, 626][\"asdf\"]\n    +-Jade.Line [627, 665][\"\\t\\t\", \"woot2\", \"(\", \"class\", \"=\", \"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\", \")\", \"asdfasdf\", \"\\n\"]\n    |  +-Jade.Indent [627, 629][\"\\t\\t\"]\n    |  +-Jade.Line [629, 665][\"woot2\", \"(\", \"class\", \"=\", \"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\", \")\", \"asdfasdf\", \"\\n\"]\n    |     +-Jade.Tag [629, 664][\"woot2\", \"(\", \"class\", \"=\", \"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\", \")\", \"asdfasdf\"]\n    |        +-Jade.CssId [629, 635][\"woot2\"]\n    |        +-Jade.TagArgs [635, 655][\"(\", \"class\", \"=\", \"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\", \")\"]\n    |        |  +-Jade.TagArg [636, 654][\"class\", \"=\", \"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\"]\n    |        |     +-Jade.TagParamKey [636, 641][\"class\"]\n    |        |     +-keywords!(\"=\", \"!=\") [641, 642][\"=\"]\n    |        |     +-Jade.TagParamValue [642, 654][\"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\"]\n    |        |        +-Jade.CssClassArray [642, 654][\"[\", \"\\\"\", \"c1\", \"\\\"\", \",\", \"\\\"\", \"c2\", \"\\\"\", \"]\"]\n    |        |           +-Jade.CssClass [644, 646][\"c1\"]\n    |        |           +-Jade.CssClass [650, 652][\"c2\"]\n    |        +-Jade.InlineText [656, 664][\"asdfasdf\"]\n    +-Jade.Line [665, 714][\"\\t\\t\", \"woot3\", \"(\", \"class\", \"=\", \"active\", \":\", \"currentUrl === \\\"/about\\\"\", \")\", \"\\n\"]\n    |  +-Jade.Indent [665, 667][\"\\t\\t\"]\n    |  +-Jade.Line [667, 714][\"woot3\", \"(\", \"class\", \"=\", \"active\", \":\", \"currentUrl === \\\"/about\\\"\", \")\", \"\\n\"]\n    |     +-Jade.Tag [667, 713][\"woot3\", \"(\", \"class\", \"=\", \"active\", \":\", \"currentUrl === \\\"/about\\\"\", \")\"]\n    |        +-Jade.Id [667, 672][\"woot3\"]\n    |        +-Jade.TagArgs [672, 713][\"(\", \"class\", \"=\", \"active\", \":\", \"currentUrl === \\\"/about\\\"\", \")\"]\n    |           +-Jade.TagArg [673, 712][\"class\", \"=\", \"active\", \":\", \"currentUrl === \\\"/about\\\"\"]\n    |              +-Jade.TagParamKey [673, 678][\"class\"]\n    |              +-keywords!(\"=\", \"!=\") [678, 679][\"=\"]\n    |              +-Jade.TagParamValue [679, 712][\"active\", \":\", \"currentUrl === \\\"/about\\\"\"]\n    |                 +-Jade.AttributeJsonObject [679, 712][\"active\", \":\", \"currentUrl === \\\"/about\\\"\"]\n    |                    +-Jade.JsonKeyValue [680, 711][\"active\", \":\", \"currentUrl === \\\"/about\\\"\"]\n    |                       +-Jade.JsonKey [680, 686][\"active\"]\n    |                       +-Jade.JsonObjectDExpression [688, 711][\"currentUrl === \\\"/about\\\"\"]\n    +-Jade.Line [714, 745][\"-\", \" var localhost = \\\"remotehost\\\"\", \"\\n\"]\n    |  +-Jade.UnbufferedCode [714, 744][\"-\", \" var localhost = \\\"remotehost\\\"\"]\n    |     +-Jade.DLineExpression [715, 744][\" var localhost = \\\"remotehost\\\"\"]\n    +-Jade.Line [745, 761][\"-\", \" var user = {}\", \"\\n\"]\n    |  +-Jade.UnbufferedCode [745, 760][\"-\", \" var user = {}\"]\n    |     +-Jade.DLineExpression [746, 760][\" var user = {}\"]\n    +-Jade.Line [761, 784][\"if\", \" \\\"localhost\\\" == host\", \"\\n\"]\n    |  +-Jade.Conditional [761, 783][\"if\", \" \\\"localhost\\\" == host\"]\n    |     +-Jade.DLineExpression [763, 783][\" \\\"localhost\\\" == host\"]\n    +-Jade.Line [784, 851][\"\\t\", \"div\", \"foo\", \"(\", \"data-bar\", \"=\", \"foo\", \",\", \"goot-one\", \")\", \"&\", \"attributes\", \"(\", \"data-foo\", \":\", \"\\\"bar\\\"\", \")\", \"\\n\"]\n    |  +-Jade.Indent [784, 785][\"\\t\"]\n    |  +-Jade.Line [785, 851][\"div\", \"foo\", \"(\", \"data-bar\", \"=\", \"foo\", \",\", \"goot-one\", \")\", \"&\", \"attributes\", \"(\", \"data-foo\", \":\", \"\\\"bar\\\"\", \")\", \"\\n\"]\n    |     +-Jade.Tag [785, 850][\"div\", \"foo\", \"(\", \"data-bar\", \"=\", \"foo\", \",\", \"goot-one\", \")\", \"&\", \"attributes\", \"(\", \"data-foo\", \":\", \"\\\"bar\\\"\", \")\"]\n    |        +-Jade.Id [785, 788][\"div\"]\n    |        +-Jade.CssId [788, 792][\"foo\"]\n    |        +-Jade.TagArgs [792, 818][\"(\", \"data-bar\", \"=\", \"foo\", \",\", \"goot-one\", \")\"]\n    |        |  +-Jade.TagArg [793, 807][\"data-bar\", \"=\", \"foo\"]\n    |        |  |  +-Jade.TagParamKey [793, 801][\"data-bar\"]\n    |        |  |  +-keywords!(\"=\", \"!=\") [801, 802][\"=\"]\n    |        |  |  +-Jade.TagParamValue [802, 807][\"foo\"]\n    |        |  |     +-Jade.Str [802, 807][\"foo\"]\n    |        |  +-Jade.TagArg [809, 817][\"goot-one\"]\n    |        |     +-Jade.TagParamKey [809, 817][\"goot-one\"]\n    |        +-Jade.AndAttributes [818, 850][\"&\", \"attributes\", \"(\", \"data-foo\", \":\", \"\\\"bar\\\"\", \")\"]\n    |           +-Jade.AttributeJsonObject [830, 849][\"data-foo\", \":\", \"\\\"bar\\\"\"]\n    |              +-Jade.JsonKeyValue [831, 848][\"data-foo\", \":\", \"\\\"bar\\\"\"]\n    |                 +-Jade.JsonKey [831, 841][\"data-foo\"]\n    |                 +-Jade.JsonObjectDExpression [843, 848][\"\\\"bar\\\"\"]\n    +-Jade.Line [851, 897][\"\\t\\t\", \"//\", \"-\", \" include:markdown ./includes/footer.jade\", \"\\n\"]\n    |  +-Jade.Indent [851, 853][\"\\t\\t\"]\n    |  +-Jade.Line [853, 897][\"//\", \"-\", \" include:markdown ./includes/footer.jade\", \"\\n\"]\n    |     +-Jade.Comment [853, 896][\"//\", \"-\", \" include:markdown ./includes/footer.jade\"]\n    |        +-literal!(\"-\") [855, 856][\"-\"]\n    |        +-Jade.InlineText [856, 896][\" include:markdown ./includes/footer.jade\"]\n    +-Jade.Line [897, 902][\"else\", \"\\n\"]\n    |  +-Jade.Conditional [897, 901][\"else\"]\n    +-Jade.Line [902, 910][\"\\t\", \"merrrt\", \"\\n\"]\n    |  +-Jade.Indent [902, 903][\"\\t\"]\n    |  +-Jade.Line [903, 910][\"merrrt\", \"\\n\"]\n    |     +-Jade.Tag [903, 909][\"merrrt\"]\n    |        +-Jade.Id [903, 909][\"merrrt\"]\n    +-Jade.Line [910, 935][\"unless\", \" !user.isAnonymous\", \"\\n\"]\n    |  +-Jade.Conditional [910, 934][\"unless\", \" !user.isAnonymous\"]\n    |     +-Jade.DLineExpression [916, 934][\" !user.isAnonymous\"]\n    +-Jade.Line [935, 954][\"\\t\", \"You\", \"are logged in\", \"\\n\"]\n    |  +-Jade.Indent [935, 936][\"\\t\"]\n    |  +-Jade.Line [936, 954][\"You\", \"are logged in\", \"\\n\"]\n    |     +-Jade.Tag [936, 953][\"You\", \"are logged in\"]\n    |        +-Jade.Id [936, 939][\"You\"]\n    |        +-Jade.InlineText [940, 953][\"are logged in\"]\n    +-Jade.Line [954, 968][\"//\", \"-\", \" :markdown\", \"\\n\"]\n    |  +-Jade.Comment [954, 967][\"//\", \"-\", \" :markdown\"]\n    |     +-literal!(\"-\") [956, 957][\"-\"]\n    |     +-Jade.InlineText [957, 967][\" :markdown\"]\n    +-Jade.Line [968, 1020][\"//\", \"-\", \" \\t### Markdown Need dedent support to parse this\", \"\\n\"]\n    |  +-Jade.Comment [968, 1019][\"//\", \"-\", \" \\t### Markdown Need dedent support to parse this\"]\n    |     +-literal!(\"-\") [970, 971][\"-\"]\n    |     +-Jade.InlineText [971, 1019][\" \\t### Markdown Need dedent support to parse this\"]\n    +-Jade.Line [1020, 1069][\"//\", \"-\", \" \\tI often like including markdown documents.{\", \"\\n\"]\n    |  +-Jade.Comment [1020, 1068][\"//\", \"-\", \" \\tI often like including markdown documents.{\"]\n    |     +-literal!(\"-\") [1022, 1023][\"-\"]\n    |     +-Jade.InlineText [1023, 1068][\" \\tI often like including markdown documents.{\"]\n    +-Jade.Line [1069, 1071][\"}\", \"\\n\"]\n    |  +-Jade.AnyContentLine [1069, 1070][\"}\"]\n    +-Jade.Line [1071, 1074][\"ul\", \"\\n\"]\n    |  +-Jade.Tag [1071, 1073][\"ul\"]\n    |     +-Jade.Id [1071, 1073][\"ul\"]\n    +-Jade.Line [1074, 1122][\"\\t\", \"each\", \"val\", \",\", \"index\", \"in\", \"{1:'one',2:'two',3:'three'}\", \"\\n\"]\n    |  +-Jade.Indent [1074, 1075][\"\\t\"]\n    |  +-Jade.Line [1075, 1122][\"each\", \"val\", \",\", \"index\", \"in\", \"{1:'one',2:'two',3:'three'}\", \"\\n\"]\n    |     +-Jade.Iteration [1075, 1121][\"each\", \"val\", \",\", \"index\", \"in\", \"{1:'one',2:'two',3:'three'}\"]\n    |        +-Jade.DVariableName [1080, 1083][\"val\"]\n    |        +-Jade.DVariableName [1085, 1090][\"index\"]\n    |        +-literal!(\"in\") [1091, 1093][\"in\"]\n    |        +-Jade.DLineExpression [1094, 1121][\"{1:'one',2:'two',3:'three'}\"]\n    +-Jade.Line [1122, 1147][\"\\t\\t\", \"li\", \"=\", \" index + ': ' + val\", \"\\n\"]\n    |  +-Jade.Indent [1122, 1124][\"\\t\\t\"]\n    |  +-Jade.Line [1124, 1147][\"li\", \"=\", \" index + ': ' + val\", \"\\n\"]\n    |     +-Jade.Tag [1124, 1146][\"li\", \"=\", \" index + ': ' + val\"]\n    |        +-Jade.Id [1124, 1126][\"li\"]\n    |        +-Jade.BufferedCode [1126, 1146][\"=\", \" index + ': ' + val\"]\n    |           +-keywords!(\"=\", \"!=\") [1126, 1127][\"=\"]\n    |           +-Jade.DLineExpression [1127, 1146][\" index + ': ' + val\"]\n    +-Jade.Line [1147, 1159][\"while\", \" n < 4\", \"\\n\"]\n    |  +-Jade.Iteration [1147, 1158][\"while\", \" n < 4\"]\n    |     +-Jade.DLineExpression [1152, 1158][\" n < 4\"]\n    +-Jade.Line [1159, 1168][\"\\t\", \"li\", \"=\", \" n++\", \"\\n\"]\n    |  +-Jade.Indent [1159, 1160][\"\\t\"]\n    |  +-Jade.Line [1160, 1168][\"li\", \"=\", \" n++\", \"\\n\"]\n    |     +-Jade.Tag [1160, 1167][\"li\", \"=\", \" n++\"]\n    |        +-Jade.Id [1160, 1162][\"li\"]\n    |        +-Jade.BufferedCode [1162, 1167][\"=\", \" n++\"]\n    |           +-keywords!(\"=\", \"!=\") [1162, 1163][\"=\"]\n    |           +-Jade.DLineExpression [1163, 1167][\" n++\"]\n    +-Jade.Line [1168, 1169][\"\\n\"]\n    +-Jade.Line [1169, 1187][\"-\", \" var friends = 0\", \"\\n\"]\n    |  +-Jade.UnbufferedCode [1169, 1186][\"-\", \" var friends = 0\"]\n    |     +-Jade.DLineExpression [1170, 1186][\" var friends = 0\"]\n    +-Jade.Line [1187, 1200][\"case\", \" \", \"friends\", \"\\n\"]\n    |  +-Jade.Case [1187, 1199][\"case\", \" \", \"friends\"]\n    |     +-literal!(\"case\") [1187, 1191][\"case\"]\n    |     +-Jade.Spacing [1191, 1192][\" \"]\n    |     +-Jade.DLineExpression [1192, 1199][\"friends\"]\n    +-Jade.Line [1200, 1208][\"\\t\", \"when\", \" 0\", \"\\n\"]\n    |  +-Jade.Indent [1200, 1201][\"\\t\"]\n    |  +-Jade.Line [1201, 1208][\"when\", \" 0\", \"\\n\"]\n    |     +-Jade.Case [1201, 1207][\"when\", \" 0\"]\n    |        +-literal!(\"when\") [1201, 1205][\"when\"]\n    +-Jade.Line [1208, 1216][\"\\t\", \"when\", \" 1\", \"\\n\"]\n    |  +-Jade.Indent [1208, 1209][\"\\t\"]\n    |  +-Jade.Line [1209, 1216][\"when\", \" 1\", \"\\n\"]\n    |     +-Jade.Case [1209, 1215][\"when\", \" 1\"]\n    |        +-literal!(\"when\") [1209, 1213][\"when\"]\n    +-Jade.Line [1216, 1246][\"\\t\\t\", \"p\", \"you have very few friends\", \"\\n\"]\n    |  +-Jade.Indent [1216, 1218][\"\\t\\t\"]\n    |  +-Jade.Line [1218, 1246][\"p\", \"you have very few friends\", \"\\n\"]\n    |     +-Jade.Tag [1218, 1245][\"p\", \"you have very few friends\"]\n    |        +-Jade.Id [1218, 1219][\"p\"]\n    |        +-Jade.InlineText [1220, 1245][\"you have very few friends\"]\n    +-Jade.Line [1246, 1286][\"\\t\", \"default\", \":\", \"p\", \"you have \", \"#{friends}\", \" friends\", \"\\n\"]\n    |  +-Jade.Indent [1246, 1247][\"\\t\"]\n    |  +-Jade.Line [1247, 1286][\"default\", \":\", \"p\", \"you have \", \"#{friends}\", \" friends\", \"\\n\"]\n    |     +-Jade.Case [1247, 1285][\"default\", \":\", \"p\", \"you have \", \"#{friends}\", \" friends\"]\n    |        +-literal!(\"default\") [1247, 1254][\"default\"]\n    |        +-Jade.InlineTag [1254, 1285][\":\", \"p\", \"you have \", \"#{friends}\", \" friends\"]\n    |           +-Jade.Id [1256, 1257][\"p\"]\n    |           +-Jade.InlineText [1258, 1267][\"you have \"]\n    |           +-Jade.StringInterpolation [1267, 1285][\"#{friends}\", \" friends\"]\n    |              +-Jade.InlineText [1277, 1285][\" friends\"]\n    +-Jade.Line [1286, 1302][\"//\", \"-\", \" Declaration\", \"\\n\"]\n    |  +-Jade.Comment [1286, 1301][\"//\", \"-\", \" Declaration\"]\n    |     +-literal!(\"-\") [1288, 1289][\"-\"]\n    |     +-Jade.InlineText [1289, 1301][\" Declaration\"]\n    +-Jade.Line [1302, 1313][\"mixin\", \"list\", \"\\n\"]\n    |  +-Jade.MixinDecl [1302, 1312][\"mixin\", \"list\"]\n    |     +-Jade.DVariableName [1308, 1312][\"list\"]\n    +-Jade.Line [1313, 1317][\"\\t\", \"ul\", \"\\n\"]\n    |  +-Jade.Indent [1313, 1314][\"\\t\"]\n    |  +-Jade.Line [1314, 1317][\"ul\", \"\\n\"]\n    |     +-Jade.Tag [1314, 1316][\"ul\"]\n    |        +-Jade.Id [1314, 1316][\"ul\"]\n    +-Jade.Line [1317, 1326][\"\\t\\t\", \"li\", \"foo\", \"\\n\"]\n    |  +-Jade.Indent [1317, 1319][\"\\t\\t\"]\n    |  +-Jade.Line [1319, 1326][\"li\", \"foo\", \"\\n\"]\n    |     +-Jade.Tag [1319, 1325][\"li\", \"foo\"]\n    |        +-Jade.Id [1319, 1321][\"li\"]\n    |        +-Jade.InlineText [1322, 1325][\"foo\"]\n    +-Jade.Line [1326, 1335][\"\\t\\t\", \"li\", \"bar\", \"\\n\"]\n    |  +-Jade.Indent [1326, 1328][\"\\t\\t\"]\n    |  +-Jade.Line [1328, 1335][\"li\", \"bar\", \"\\n\"]\n    |     +-Jade.Tag [1328, 1334][\"li\", \"bar\"]\n    |        +-Jade.Id [1328, 1330][\"li\"]\n    |        +-Jade.InlineText [1331, 1334][\"bar\"]\n    +-Jade.Line [1335, 1344][\"\\t\\t\", \"li\", \"baz\", \"\\n\"]\n    |  +-Jade.Indent [1335, 1337][\"\\t\\t\"]\n    |  +-Jade.Line [1337, 1344][\"li\", \"baz\", \"\\n\"]\n    |     +-Jade.Tag [1337, 1343][\"li\", \"baz\"]\n    |        +-Jade.Id [1337, 1339][\"li\"]\n    |        +-Jade.InlineText [1340, 1343][\"baz\"]\n    +-Jade.Line [1344, 1352][\"//\", \"-\", \" Use\", \"\\n\"]\n    |  +-Jade.Comment [1344, 1351][\"//\", \"-\", \" Use\"]\n    |     +-literal!(\"-\") [1346, 1347][\"-\"]\n    |     +-Jade.InlineText [1347, 1351][\" Use\"]\n    +-Jade.Line [1352, 1358][\"+\", \"list\", \"\\n\"]\n    |  +-Jade.Mixin [1352, 1357][\"+\", \"list\"]\n    |     +-Jade.DVariableName [1353, 1357][\"list\"]\n    +-Jade.Line [1358, 1364][\"+\", \"list\", \"\\n\"]\n    |  +-Jade.Mixin [1358, 1363][\"+\", \"list\"]\n    |     +-Jade.DVariableName [1359, 1363][\"list\"]\n    +-Jade.Line [1364, 1380][\"mixin\", \"pet\", \"(\", \"name\", \")\", \"\\n\"]\n    |  +-Jade.MixinDecl [1364, 1379][\"mixin\", \"pet\", \"(\", \"name\", \")\"]\n    |     +-Jade.DVariableName [1370, 1373][\"pet\"]\n    |     +-Jade.MixinDeclArgs [1373, 1379][\"(\", \"name\", \")\"]\n    |        +-Jade.DVariableName [1374, 1378][\"name\"]\n    +-Jade.Line [1380, 1394][\"\\t\", \"li\", \".\", \"pet\", \"=\", \" name\", \"\\n\"]\n    |  +-Jade.Indent [1380, 1381][\"\\t\"]\n    |  +-Jade.Line [1381, 1394][\"li\", \".\", \"pet\", \"=\", \" name\", \"\\n\"]\n    |     +-Jade.Tag [1381, 1393][\"li\", \".\", \"pet\", \"=\", \" name\"]\n    |        +-Jade.Id [1381, 1383][\"li\"]\n    |        +-Jade.CssClass [1384, 1387][\"pet\"]\n    |        +-Jade.BufferedCode [1387, 1393][\"=\", \" name\"]\n    |           +-keywords!(\"=\", \"!=\") [1387, 1388][\"=\"]\n    |           +-Jade.DLineExpression [1388, 1393][\" name\"]\n    +-Jade.Line [1394, 1397][\"ul\", \"\\n\"]\n    |  +-Jade.Tag [1394, 1396][\"ul\"]\n    |     +-Jade.Id [1394, 1396][\"ul\"]\n    +-Jade.Line [1397, 1410][\"\\t\", \"+\", \"pet\", \"(\", \"cat\", \")\", \"\\n\"]\n    |  +-Jade.Indent [1397, 1398][\"\\t\"]\n    |  +-Jade.Line [1398, 1410][\"+\", \"pet\", \"(\", \"cat\", \")\", \"\\n\"]\n    |     +-Jade.Mixin [1398, 1409][\"+\", \"pet\", \"(\", \"cat\", \")\"]\n    |        +-Jade.DVariableName [1399, 1402][\"pet\"]\n    |        +-Jade.TagParamValue [1403, 1408][\"cat\"]\n    |           +-Jade.Str [1403, 1408][\"cat\"]\n    +-Jade.Line [1410, 1423][\"\\t\", \"+\", \"pet\", \"(\", \"dog\", \")\", \"\\n\"]\n    |  +-Jade.Indent [1410, 1411][\"\\t\"]\n    |  +-Jade.Line [1411, 1423][\"+\", \"pet\", \"(\", \"dog\", \")\", \"\\n\"]\n    |     +-Jade.Mixin [1411, 1422][\"+\", \"pet\", \"(\", \"dog\", \")\"]\n    |        +-Jade.DVariableName [1412, 1415][\"pet\"]\n    |        +-Jade.TagParamValue [1416, 1421][\"dog\"]\n    |           +-Jade.Str [1416, 1421][\"dog\"]\n    +-Jade.Line [1423, 1436][\"\\t\", \"+\", \"pet\", \"(\", \"pig\", \")\", \"\\n\"]\n    |  +-Jade.Indent [1423, 1424][\"\\t\"]\n    |  +-Jade.Line [1424, 1436][\"+\", \"pet\", \"(\", \"pig\", \")\", \"\\n\"]\n    |     +-Jade.Mixin [1424, 1435][\"+\", \"pet\", \"(\", \"pig\", \")\"]\n    |        +-Jade.DVariableName [1425, 1428][\"pet\"]\n    |        +-Jade.TagParamValue [1429, 1434][\"pig\"]\n    |           +-Jade.Str [1429, 1434][\"pig\"]\n    +-Jade.Line [1436, 1457][\"mixin\", \"article\", \"(\", \"title\", \")\", \"\\n\"]\n    |  +-Jade.MixinDecl [1436, 1456][\"mixin\", \"article\", \"(\", \"title\", \")\"]\n    |     +-Jade.DVariableName [1442, 1449][\"article\"]\n    |     +-Jade.MixinDeclArgs [1449, 1456][\"(\", \"title\", \")\"]\n    |        +-Jade.DVariableName [1450, 1455][\"title\"]\n    +-Jade.Line [1457, 1467][\"\\t\", \".\", \"article\", \"\\n\"]\n    |  +-Jade.Indent [1457, 1458][\"\\t\"]\n    |  +-Jade.Line [1458, 1467][\".\", \"article\", \"\\n\"]\n    |     +-Jade.Tag [1458, 1466][\".\", \"article\"]\n    |        +-Jade.CssClass [1459, 1466][\"article\"]\n    +-Jade.Line [1467, 1486][\"\\t\\t\", \".\", \"article-wrapper\", \"\\n\"]\n    |  +-Jade.Indent [1467, 1469][\"\\t\\t\"]\n    |  +-Jade.Line [1469, 1486][\".\", \"article-wrapper\", \"\\n\"]\n    |     +-Jade.Tag [1469, 1485][\".\", \"article-wrapper\"]\n    |        +-Jade.CssClass [1470, 1485][\"article-wrapper\"]\n    +-Jade.Line [1486, 1499][\"\\t\\t\\t\", \"h1\", \"=\", \" title\", \"\\n\"]\n    |  +-Jade.Indent [1486, 1489][\"\\t\\t\\t\"]\n    |  +-Jade.Line [1489, 1499][\"h1\", \"=\", \" title\", \"\\n\"]\n    |     +-Jade.Tag [1489, 1498][\"h1\", \"=\", \" title\"]\n    |        +-Jade.Id [1489, 1491][\"h1\"]\n    |        +-Jade.BufferedCode [1491, 1498][\"=\", \" title\"]\n    |           +-keywords!(\"=\", \"!=\") [1491, 1492][\"=\"]\n    |           +-Jade.DLineExpression [1492, 1498][\" title\"]\n    +-Jade.Line [1499, 1511][\"\\t\\t\\t\", \"if\", \"block\", \"\\n\"]\n    |  +-Jade.Indent [1499, 1502][\"\\t\\t\\t\"]\n    |  +-Jade.Line [1502, 1511][\"if\", \"block\", \"\\n\"]\n    |     +-Jade.Conditional [1502, 1510][\"if\", \"block\"]\n    |        +-Jade.IfBlock [1502, 1510][\"if\", \"block\"]\n    +-Jade.Line [1511, 1521][\"\\t\\t\\t\\t\", \"block\", \"\\n\"]\n    |  +-Jade.Indent [1511, 1515][\"\\t\\t\\t\\t\"]\n    |  +-Jade.Line [1515, 1521][\"block\", \"\\n\"]\n    |     +-Jade.Block [1515, 1520][\"block\"]\n    +-Jade.Line [1521, 1529][\"\\t\\t\\t\", \"else\", \"\\n\"]\n    |  +-Jade.Indent [1521, 1524][\"\\t\\t\\t\"]\n    |  +-Jade.Line [1524, 1529][\"else\", \"\\n\"]\n    |     +-Jade.Conditional [1524, 1528][\"else\"]\n    +-Jade.Line [1529, 1555][\"\\t\\t\\t\\t\", \"p\", \"No content provided\", \"\\n\"]\n    |  +-Jade.Indent [1529, 1533][\"\\t\\t\\t\\t\"]\n    |  +-Jade.Line [1533, 1555][\"p\", \"No content provided\", \"\\n\"]\n    |     +-Jade.Tag [1533, 1554][\"p\", \"No content provided\"]\n    |        +-Jade.Id [1533, 1534][\"p\"]\n    |        +-Jade.InlineText [1535, 1554][\"No content provided\"]\n    +-Jade.Line [1555, 1556][\"\\n\"]\n    +-Jade.Line [1556, 1580][\"+\", \"article\", \"(\", \"'Hello world'\", \")\", \"\\n\"]\n    |  +-Jade.Mixin [1556, 1579][\"+\", \"article\", \"(\", \"'Hello world'\", \")\"]\n    |     +-Jade.DVariableName [1557, 1564][\"article\"]\n    |     +-Jade.TagParamValue [1565, 1578][\"'Hello world'\"]\n    |        +-Jade.ParamDExpression [1565, 1578][\"'Hello world'\"]\n    +-Jade.Line [1580, 1581][\"\\n\"]\n    +-Jade.Line [1581, 1605][\"+\", \"article\", \"(\", \"'Hello world'\", \")\", \"\\n\"]\n    |  +-Jade.Mixin [1581, 1604][\"+\", \"article\", \"(\", \"'Hello world'\", \")\"]\n    |     +-Jade.DVariableName [1582, 1589][\"article\"]\n    |     +-Jade.TagParamValue [1590, 1603][\"'Hello world'\"]\n    |        +-Jade.ParamDExpression [1590, 1603][\"'Hello world'\"]\n    +-Jade.Line [1605, 1619][\"\\t\", \"p\", \"This is my\", \"\\n\"]\n    |  +-Jade.Indent [1605, 1606][\"\\t\"]\n    |  +-Jade.Line [1606, 1619][\"p\", \"This is my\", \"\\n\"]\n    |     +-Jade.Tag [1606, 1618][\"p\", \"This is my\"]\n    |        +-Jade.Id [1606, 1607][\"p\"]\n    |        +-Jade.InlineText [1608, 1618][\"This is my\"]\n    +-Jade.Line [1619, 1638][\"\\t\", \"p\", \"Amazing article\", \"\\n\"]\n    |  +-Jade.Indent [1619, 1620][\"\\t\"]\n    |  +-Jade.Line [1620, 1638][\"p\", \"Amazing article\", \"\\n\"]\n    |     +-Jade.Tag [1620, 1637][\"p\", \"Amazing article\"]\n    |        +-Jade.Id [1620, 1621][\"p\"]\n    |        +-Jade.InlineText [1622, 1637][\"Amazing article\"]\n    +-Jade.Line [1638, 1661][\"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\", \"\\n\"]\n    |  +-Jade.MixinDecl [1638, 1660][\"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\"]\n    |     +-Jade.DVariableName [1644, 1648][\"link\"]\n    |     +-Jade.MixinDeclArgs [1648, 1660][\"(\", \"href\", \",\", \"name\", \")\"]\n    |        +-Jade.DVariableName [1649, 1653][\"href\"]\n    |        +-Jade.DVariableName [1655, 1659][\"name\"]\n    +-Jade.Line [1661, 1695][\"\\t\", \"//\", \"-\", \" attributes == {class: \\\"btn\\\"}\", \"\\n\"]\n    |  +-Jade.Indent [1661, 1662][\"\\t\"]\n    |  +-Jade.Line [1662, 1695][\"//\", \"-\", \" attributes == {class: \\\"btn\\\"}\", \"\\n\"]\n    |     +-Jade.Comment [1662, 1694][\"//\", \"-\", \" attributes == {class: \\\"btn\\\"}\"]\n    |        +-literal!(\"-\") [1664, 1665][\"-\"]\n    |        +-Jade.InlineText [1665, 1694][\" attributes == {class: \\\"btn\\\"}\"]\n    +-Jade.Line [1695, 1740][\"\\t\", \"a\", \"(\", \"class\", \"!=\", \"attributes.class\", \",\", \"href\", \"=\", \"href\", \")\", \"=\", \" name\", \"\\n\"]\n    |  +-Jade.Indent [1695, 1696][\"\\t\"]\n    |  +-Jade.Line [1696, 1740][\"a\", \"(\", \"class\", \"!=\", \"attributes.class\", \",\", \"href\", \"=\", \"href\", \")\", \"=\", \" name\", \"\\n\"]\n    |     +-Jade.Tag [1696, 1739][\"a\", \"(\", \"class\", \"!=\", \"attributes.class\", \",\", \"href\", \"=\", \"href\", \")\", \"=\", \" name\"]\n    |        +-Jade.Id [1696, 1697][\"a\"]\n    |        +-Jade.TagArgs [1697, 1733][\"(\", \"class\", \"!=\", \"attributes.class\", \",\", \"href\", \"=\", \"href\", \")\"]\n    |        |  +-Jade.TagArg [1698, 1721][\"class\", \"!=\", \"attributes.class\"]\n    |        |  |  +-Jade.TagParamKey [1698, 1703][\"class\"]\n    |        |  |  +-keywords!(\"=\", \"!=\") [1703, 1705][\"!=\"]\n    |        |  |  +-Jade.TagParamValue [1705, 1721][\"attributes.class\"]\n    |        |  |     +-Jade.ParamDExpression [1705, 1721][\"attributes.class\"]\n    |        |  +-Jade.TagArg [1723, 1732][\"href\", \"=\", \"href\"]\n    |        |     +-Jade.TagParamKey [1723, 1727][\"href\"]\n    |        |     +-keywords!(\"=\", \"!=\") [1727, 1728][\"=\"]\n    |        |     +-Jade.TagParamValue [1728, 1732][\"href\"]\n    |        |        +-Jade.ParamDExpression [1728, 1732][\"href\"]\n    |        +-Jade.BufferedCode [1733, 1739][\"=\", \" name\"]\n    |           +-keywords!(\"=\", \"!=\") [1733, 1734][\"=\"]\n    |           +-Jade.DLineExpression [1734, 1739][\" name\"]\n    +-Jade.Line [1740, 1774][\"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\", \"\\n\"]\n    |  +-Jade.Mixin [1740, 1773][\"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\"]\n    |     +-Jade.DVariableName [1741, 1745][\"link\"]\n    |     +-Jade.TagParamValue [1746, 1752][\"'/foo'\"]\n    |     |  +-Jade.ParamDExpression [1746, 1752][\"'/foo'\"]\n    |     +-Jade.TagParamValue [1754, 1759][\"'foo'\"]\n    |     |  +-Jade.ParamDExpression [1754, 1759][\"'foo'\"]\n    |     +-Jade.TagArgs [1760, 1773][\"(\", \"class\", \"=\", \"btn\", \")\"]\n    |        +-Jade.TagArg [1761, 1772][\"class\", \"=\", \"btn\"]\n    |           +-Jade.TagParamKey [1761, 1766][\"class\"]\n    |           +-keywords!(\"=\", \"!=\") [1766, 1767][\"=\"]\n    |           +-Jade.TagParamValue [1767, 1772][\"btn\"]\n    |              +-Jade.Str [1767, 1772][\"btn\"]\n    +-Jade.Line [1774, 1797][\"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\", \"\\n\"]\n    |  +-Jade.MixinDecl [1774, 1796][\"mixin\", \"link\", \"(\", \"href\", \",\", \"name\", \")\"]\n    |     +-Jade.DVariableName [1780, 1784][\"link\"]\n    |     +-Jade.MixinDeclArgs [1784, 1796][\"(\", \"href\", \",\", \"name\", \")\"]\n    |        +-Jade.DVariableName [1785, 1789][\"href\"]\n    |        +-Jade.DVariableName [1791, 1795][\"name\"]\n    +-Jade.Line [1797, 1840][\"\\t\", \"a\", \"(\", \"href\", \"=\", \"href\", \")\", \"&\", \"attributes\", \"(\", \"attributes\", \")\", \"=\", \" name\", \"\\n\"]\n    |  +-Jade.Indent [1797, 1798][\"\\t\"]\n    |  +-Jade.Line [1798, 1840][\"a\", \"(\", \"href\", \"=\", \"href\", \")\", \"&\", \"attributes\", \"(\", \"attributes\", \")\", \"=\", \" name\", \"\\n\"]\n    |     +-Jade.Tag [1798, 1839][\"a\", \"(\", \"href\", \"=\", \"href\", \")\", \"&\", \"attributes\", \"(\", \"attributes\", \")\", \"=\", \" name\"]\n    |        +-Jade.Id [1798, 1799][\"a\"]\n    |        +-Jade.TagArgs [1799, 1810][\"(\", \"href\", \"=\", \"href\", \")\"]\n    |        |  +-Jade.TagArg [1800, 1809][\"href\", \"=\", \"href\"]\n    |        |     +-Jade.TagParamKey [1800, 1804][\"href\"]\n    |        |     +-keywords!(\"=\", \"!=\") [1804, 1805][\"=\"]\n    |        |     +-Jade.TagParamValue [1805, 1809][\"href\"]\n    |        |        +-Jade.ParamDExpression [1805, 1809][\"href\"]\n    |        +-Jade.AndAttributes [1810, 1833][\"&\", \"attributes\", \"(\", \"attributes\", \")\"]\n    |        |  +-Jade.ParamDExpression [1822, 1832][\"attributes\"]\n    |        +-Jade.BufferedCode [1833, 1839][\"=\", \" name\"]\n    |           +-keywords!(\"=\", \"!=\") [1833, 1834][\"=\"]\n    |           +-Jade.DLineExpression [1834, 1839][\" name\"]\n    +-Jade.Line [1840, 1841][\"\\n\"]\n    +-Jade.Line [1841, 1875][\"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\", \"\\n\"]\n    |  +-Jade.Mixin [1841, 1874][\"+\", \"link\", \"(\", \"'/foo'\", \",\", \"'foo'\", \")\", \"(\", \"class\", \"=\", \"btn\", \")\"]\n    |     +-Jade.DVariableName [1842, 1846][\"link\"]\n    |     +-Jade.TagParamValue [1847, 1853][\"'/foo'\"]\n    |     |  +-Jade.ParamDExpression [1847, 1853][\"'/foo'\"]\n    |     +-Jade.TagParamValue [1855, 1860][\"'foo'\"]\n    |     |  +-Jade.ParamDExpression [1855, 1860][\"'foo'\"]\n    |     +-Jade.TagArgs [1861, 1874][\"(\", \"class\", \"=\", \"btn\", \")\"]\n    |        +-Jade.TagArg [1862, 1873][\"class\", \"=\", \"btn\"]\n    |           +-Jade.TagParamKey [1862, 1867][\"class\"]\n    |           +-keywords!(\"=\", \"!=\") [1867, 1868][\"=\"]\n    |           +-Jade.TagParamValue [1868, 1873][\"btn\"]\n    |              +-Jade.Str [1868, 1873][\"btn\"]\n    +-Jade.Line [1875, 1900][\"mixin\", \"list\", \"(\", \"id\", \",\", \"...\", \"items\", \")\", \"\\n\"]\n    |  +-Jade.MixinDecl [1875, 1899][\"mixin\", \"list\", \"(\", \"id\", \",\", \"...\", \"items\", \")\"]\n    |     +-Jade.DVariableName [1881, 1885][\"list\"]\n    |     +-Jade.MixinDeclArgs [1885, 1899][\"(\", \"id\", \",\", \"...\", \"items\", \")\"]\n    |        +-Jade.DVariableName [1886, 1888][\"id\"]\n    |        +-Jade.MixinVarArg [1888, 1898][\",\", \"...\", \"items\"]\n    |           +-Jade.DVariableName [1893, 1898][\"items\"]\n    +-Jade.Line [1900, 1911][\"\\t\", \"ul\", \"(\", \"id\", \"=\", \"id\", \")\", \"\\n\"]\n    |  +-Jade.Indent [1900, 1901][\"\\t\"]\n    |  +-Jade.Line [1901, 1911][\"ul\", \"(\", \"id\", \"=\", \"id\", \")\", \"\\n\"]\n    |     +-Jade.Tag [1901, 1910][\"ul\", \"(\", \"id\", \"=\", \"id\", \")\"]\n    |        +-Jade.Id [1901, 1903][\"ul\"]\n    |        +-Jade.TagArgs [1903, 1910][\"(\", \"id\", \"=\", \"id\", \")\"]\n    |           +-Jade.TagArg [1904, 1909][\"id\", \"=\", \"id\"]\n    |              +-Jade.TagParamKey [1904, 1906][\"id\"]\n    |              +-keywords!(\"=\", \"!=\") [1906, 1907][\"=\"]\n    |              +-Jade.TagParamValue [1907, 1909][\"id\"]\n    |                 +-Jade.ParamDExpression [1907, 1909][\"id\"]\n    +-Jade.Line [1911, 1932][\"\\t\\t\", \"each\", \"item\", \"in\", \"items\", \"\\n\"]\n    |  +-Jade.Indent [1911, 1913][\"\\t\\t\"]\n    |  +-Jade.Line [1913, 1932][\"each\", \"item\", \"in\", \"items\", \"\\n\"]\n    |     +-Jade.Iteration [1913, 1931][\"each\", \"item\", \"in\", \"items\"]\n    |        +-Jade.DVariableName [1918, 1922][\"item\"]\n    |        +-literal!(\"in\") [1923, 1925][\"in\"]\n    |        +-Jade.DLineExpression [1926, 1931][\"items\"]\n    +-Jade.Line [1932, 1944][\"\\t\\t\\t\", \"li\", \"=\", \" item\", \"\\n\"]\n    |  +-Jade.Indent [1932, 1935][\"\\t\\t\\t\"]\n    |  +-Jade.Line [1935, 1944][\"li\", \"=\", \" item\", \"\\n\"]\n    |     +-Jade.Tag [1935, 1943][\"li\", \"=\", \" item\"]\n    |        +-Jade.Id [1935, 1937][\"li\"]\n    |        +-Jade.BufferedCode [1937, 1943][\"=\", \" item\"]\n    |           +-keywords!(\"=\", \"!=\") [1937, 1938][\"=\"]\n    |           +-Jade.DLineExpression [1938, 1943][\" item\"]\n    +-Jade.Line [1944, 1945][\"\\n\"]\n    +-Jade.Line [1945, 1974][\"+\", \"list\", \"(\", \"'my-list'\", \",\", \"1\", \",\", \"2\", \",\", \"3\", \",\", \"4\", \")\", \"\\n\"]\n    |  +-Jade.Mixin [1945, 1973][\"+\", \"list\", \"(\", \"'my-list'\", \",\", \"1\", \",\", \"2\", \",\", \"3\", \",\", \"4\", \")\"]\n    |     +-Jade.DVariableName [1946, 1950][\"list\"]\n    |     +-Jade.TagParamValue [1951, 1960][\"'my-list'\"]\n    |     |  +-Jade.ParamDExpression [1951, 1960][\"'my-list'\"]\n    |     +-Jade.TagParamValue [1962, 1963][\"1\"]\n    |     |  +-Jade.ParamDExpression [1962, 1963][\"1\"]\n    |     +-Jade.TagParamValue [1965, 1966][\"2\"]\n    |     |  +-Jade.ParamDExpression [1965, 1966][\"2\"]\n    |     +-Jade.TagParamValue [1968, 1969][\"3\"]\n    |     |  +-Jade.ParamDExpression [1968, 1969][\"3\"]\n    |     +-Jade.TagParamValue [1971, 1972][\"4\"]\n    |        +-Jade.ParamDExpression [1971, 1972][\"4\"]\n    +-Jade.Line [1974, 1975][\"\\n\"]\n    +-Jade.Line [1975, 2330][\"p\", \"\\n\\tIf you take a look at this page's source #[span(woot) a(target=\\\"_blank\\\", href=\\\"https://github.com/jadejs/jade/blob/master/docs/views/reference/interpolation.jade\\\") on GitHub],\\n\\tyoull see several places where the tag interpolation operator is\\n\\tused like so.\\n\\t.quote // this is raw text so the .quote means nothing to jade\\n\\t\\tp Joel: !{riskyBusiness}\", \"\\n\", \"}\", \"\\n\"]\n    |  +-Jade.Tag [1975, 2329][\"p\", \"\\n\\tIf you take a look at this page's source #[span(woot) a(target=\\\"_blank\\\", href=\\\"https://github.com/jadejs/jade/blob/master/docs/views/reference/interpolation.jade\\\") on GitHub],\\n\\tyoull see several places where the tag interpolation operator is\\n\\tused like so.\\n\\t.quote // this is raw text so the .quote means nothing to jade\\n\\t\\tp Joel: !{riskyBusiness}\", \"\\n\", \"}\"]\n    |     +-Jade.Id [1975, 1976][\"p\"]\n    |     +-Jade.BlockInATag [1976, 2329][\"\\n\\tIf you take a look at this page's source #[span(woot) a(target=\\\"_blank\\\", href=\\\"https://github.com/jadejs/jade/blob/master/docs/views/reference/interpolation.jade\\\") on GitHub],\\n\\tyoull see several places where the tag interpolation operator is\\n\\tused like so.\\n\\t.quote // this is raw text so the .quote means nothing to jade\\n\\t\\tp Joel: !{riskyBusiness}\", \"\\n\", \"}\"]\n    +-Jade.Line [2330, 2386][\"p\", \"\\n\\tThis is supposed to just be text inside a p tag.\", \"\\n\", \"}\", \"\\n\"]\n    |  +-Jade.Tag [2330, 2385][\"p\", \"\\n\\tThis is supposed to just be text inside a p tag.\", \"\\n\", \"}\"]\n    |     +-Jade.Id [2330, 2331][\"p\"]\n    |     +-Jade.BlockInATag [2331, 2385][\"\\n\\tThis is supposed to just be text inside a p tag.\", \"\\n\", \"}\"]\n    +-Jade.Line [2386, 2428][\"-\", \" var msg = {toUpperCase: function () {}}\", \"\\n\"]\n    |  +-Jade.UnbufferedCode [2386, 2427][\"-\", \" var msg = {toUpperCase: function () {}}\"]\n    |     +-Jade.DLineExpression [2387, 2427][\" var msg = {toUpperCase: function () {}}\"]\n    +-Jade.Line [2428, 2484][\"p\", \"This is \", \"#{msg.toUpperCase()}\", \" <- upper case characters\", \"\\n\"]\n    |  +-Jade.Tag [2428, 2483][\"p\", \"This is \", \"#{msg.toUpperCase()}\", \" <- upper case characters\"]\n    |     +-Jade.Id [2428, 2429][\"p\"]\n    |     +-Jade.InlineText [2430, 2438][\"This is \"]\n    |     +-Jade.StringInterpolation [2438, 2483][\"#{msg.toUpperCase()}\", \" <- upper case characters\"]\n    |        +-Jade.InlineText [2458, 2483][\" <- upper case characters\"]\n    +-Jade.Line [2484, 2485][\"\\n\"]\n    +-Jade.Line [2485, 2525][\"//\", \"-\", \" Following is asdf, its the last tag\", \"\\n\"]\n    |  +-Jade.Comment [2485, 2524][\"//\", \"-\", \" Following is asdf, its the last tag\"]\n    |     +-literal!(\"-\") [2487, 2488][\"-\"]\n    |     +-Jade.InlineText [2488, 2524][\" Following is asdf, its the last tag\"]\n    +-Jade.Line [2525, 2530][\"asdf\", \"\\n\"]\n       +-Jade.Tag [2525, 2529][\"asdf\"]\n          +-Jade.Id [2525, 2529][\"asdf\"]\n",
			"settings":
			{
				"buffer_size": 51909,
				"line_ending": "Unix",
				"name": "runtime:"
			}
		},
		{
			"file": "views/index.jade",
			"settings":
			{
				"buffer_size": 437,
				"line_ending": "Unix"
			}
		},
		{
			"file": "views/base_layout.jade",
			"settings":
			{
				"buffer_size": 2528,
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/jade/pegged.d",
			"settings":
			{
				"buffer_size": 6158,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 167.0,
		"last_filter": "move",
		"selected_items":
		[
			[
				"move",
				"File: Move"
			],
			[
				"dele",
				"File: Delete"
			],
			[
				"d",
				"Set Syntax: D"
			],
			[
				"ren",
				"File: Rename"
			],
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"html",
				"Set Syntax: HTML"
			],
			[
				"tabs",
				"Indentation: Convert to Tabs"
			],
			[
				"jade",
				"Set Syntax: Jade"
			],
			[
				"jad",
				"Set Syntax: Jade"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"dkit",
				"DKit: Restart DCD Autocompletion Server"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 766.0
	},
	"console":
	{
		"height": 139.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/rmcguire/Projects/jade",
		"/home/rmcguire/Projects/jade/source",
		"/home/rmcguire/Projects/jade/source/jade",
		"/home/rmcguire/Projects/jade/views"
	],
	"file_history":
	[
		"/home/rmcguire/Projects/jade/views/style.css",
		"/home/rmcguire/Projects/jade/views/b.jade",
		"/home/rmcguire/Projects/examples/d/import_string.d",
		"/home/rmcguire/Projects/jade/source/jade/pegged.d",
		"/home/rmcguire/Projects/examples/opengl/argb_window.c",
		"/mnt/home/rmcguire/.profile",
		"/home/rmcguire/.profile",
		"/home/rmcguire/Documents/Programming/go/src/google.golang.org/api/admin/reports/v1/admin-gen.go",
		"/home/rmcguire/Projects/jade/dub.json",
		"/home/rmcguire/test.html",
		"/home/rmcguire/materiald/views/material_base.dt",
		"/home/rmcguire/materiald/views/material_sidenav.dt",
		"/home/rmcguire/materiald/views/app.js",
		"/home/rmcguire/materiald/source/app.d",
		"/home/rmcguire/materiald/views/app.css",
		"/home/rmcguire/materiald/views/quick_settings_panel.dt",
		"/home/rmcguire/materiald/views/material_list.dt",
		"/home/rmcguire/materiald/views/material_menubar.jade",
		"/home/rmcguire/materiald/views/material_dropdown_menu.dt",
		"/home/rmcguire/materiald/views/test.dt",
		"/home/rmcguire/.dub/packages/vibe-d-0.7.24/source/vibe/templ/diet.d",
		"/home/rmcguire/materiald/views/material_toolbar.dt",
		"/home/rmcguire/materiald/views/material_base_toolbar.dt",
		"/home/rmcguire/materiald/public/css/app.css",
		"/home/rmcguire/materiald/public/js/app.js",
		"/home/rmcguire/materiald/views/test.js",
		"/home/rmcguire/materiald/views/test.css",
		"/home/rmcguire/materiald/views/material_dependencies.dt",
		"/home/rmcguire/materiald/views/test.html",
		"/home/rmcguire/materiald/dub.json",
		"/home/rmcguire/.dub/packages/dlib-master/dub.json",
		"/home/rmcguire/.dub/packages/gl3n-1.0.1/dub.json",
		"/home/rmcguire/.dub/packages/gl3n-1.0.1/gl3n/linalg.d",
		"/home/rmcguire/.dub/packages/dlib-master/dlib/container/dict.d",
		"/home/rmcguire/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/rmcguire/.config/sublime-text-3/Installed Packages/Material-Theme.sublime-theme",
		"/home/rmcguire/.config/sublime-text-3/Packages/User/DKit.sublime-settings",
		"/home/rmcguire/.config/sublime-text-3/Packages/DKit/DKit.sublime-settings",
		"/home/rmcguire/.config/sublime-text-3/Packages/GoSublime/CHANGELOG.md",
		"/home/rmcguire/.config/sublime-text-3/Packages/GoSublime/USAGE.md"
	],
	"find":
	{
		"height": 47.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"TemplateS",
			"DLineExpression",
			"Indent",
			"children",
			"base_layout",
			"matches[0]",
			".name",
			"children",
			"T",
			"= ",
			"*index_ptr",
			"current",
			"int ",
			"ulong",
			"]);\n",
			"previous_list[0]",
			"previous_indent,",
			"p.",
			"previous.matches[1",
			"previous.name",
			"parent",
			"&&",
			"struct_o",
			"renderBl",
			"blockWrapJadeFile",
			"sink",
			"string ",
			"3",
			"index",
			"renderBlock",
			"block",
			"TagArgs",
			"Tag",
			"-1",
			"index",
			"Extend",
			"renderExtend",
			"base_page",
			"Empty",
			"Entend",
			"renderEntend",
			"renderInclude",
			"\\n",
			"inner",
			"sink",
			"renderInclude",
			"sink",
			"Raw",
			"child",
			"break;",
			"case ",
			"Case",
			"case",
			"renderInclude",
			"isIndentedLine",
			"pragma",
			"*",
			"root",
			"mixin",
			"inlineText",
			"Tag",
			"printClosingTags",
			"printClosingTag",
			"html",
			"childoutput",
			"renderToken",
			"case ",
			"return",
			"renderLine",
			"%s%s",
			"indent_changed",
			"decreased_indent",
			"doc",
			"Doc",
			"DocType",
			"toHtml",
			"renderTag",
			">",
			"AttributeJsonObject",
			"keyvalue",
			"Jade.TagParamValue",
			"Jade.TagArgs",
			"TagArgs",
			"&item",
			"id",
			"renderTag",
			"if",
			"&",
			"', '",
			"p)",
			"p.matches[0]",
			"InlineText",
			"StringInterpolation+",
			"StringInterpolation",
			" p.children",
			"opCall",
			"Buffered",
			"renderBufferedCode",
			"Buffered",
			"item",
			"in_block",
			"trim",
			"', '",
			"Line",
			"nextLine",
			"p.",
			"line_number",
			"sinclude",
			"t) {\n		return ",
			"line_number, render",
			", ",
			" / ",
			";\n",
			"rawMode",
			"isHtml5",
			"!isBoolean",
			"tagarg.type",
			"tagarg.ch",
			"ParseTree",
			"line_number,",
			"rend",
			":",
			"ret~\"",
			"Line",
			" Line",
			", indent",
			"%d ",
			"lineNumber"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 11,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "source/app.d",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 607,
						"regions":
						{
						},
						"selection":
						[
							[
								607,
								607
							]
						],
						"settings":
						{
							"color_scheme": "Packages/Material Theme/schemes/Material-Theme.tmTheme",
							"syntax": "Packages/D/D.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 1,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 575,
						"regions":
						{
						},
						"selection":
						[
							[
								223,
								223
							]
						],
						"settings":
						{
							"auto_name": "Node(\"Jade.RootTag\", [], [",
							"default_dir": "/home/rmcguire/Projects/jade",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "source/jade/package.d",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37,
						"regions":
						{
						},
						"selection":
						[
							[
								37,
								37
							]
						],
						"settings":
						{
							"color_scheme": "Packages/Material Theme/schemes/Material-Theme.tmTheme",
							"syntax": "Packages/D/D.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "source/jade/base.d",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4352,
						"regions":
						{
						},
						"selection":
						[
							[
								1432,
								1432
							]
						],
						"settings":
						{
							"color_scheme": "Packages/Material Theme/schemes/Material-Theme.tmTheme",
							"syntax": "Packages/D/D.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 20304,
						"regions":
						{
						},
						"selection":
						[
							[
								9,
								9
							]
						],
						"settings":
						{
							"default_dir": "/home/rmcguire/Projects/jade",
							"syntax": "Packages/D/D.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": -0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18780,
						"regions":
						{
						},
						"selection":
						[
							[
								10,
								10
							]
						],
						"settings":
						{
							"default_dir": "/home/rmcguire/Projects/jade",
							"syntax": "Packages/D/D.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3605,
						"regions":
						{
						},
						"selection":
						[
							[
								319,
								319
							]
						],
						"settings":
						{
							"default_dir": "/home/rmcguire/Projects/jade",
							"syntax": "Packages/HTML/HTML.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "current_output.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4637,
						"regions":
						{
						},
						"selection":
						[
							[
								1679,
								1679
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 90.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51909,
						"regions":
						{
						},
						"selection":
						[
							[
								24236,
								24236
							]
						],
						"settings":
						{
							"auto_name": "runtime:",
							"default_dir": "/home/rmcguire/Projects/jade",
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3289.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "views/index.jade",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 437,
						"regions":
						{
						},
						"selection":
						[
							[
								290,
								290
							]
						],
						"settings":
						{
							"syntax": "Packages/Jade/Syntaxes/Jade.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "views/base_layout.jade",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2528,
						"regions":
						{
						},
						"selection":
						[
							[
								1569,
								1569
							]
						],
						"settings":
						{
							"syntax": "Packages/Jade/Syntaxes/Jade.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 63.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "source/jade/pegged.d",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6158,
						"regions":
						{
						},
						"selection":
						[
							[
								609,
								609
							]
						],
						"settings":
						{
							"syntax": "Packages/D/D.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 24.0
	},
	"input":
	{
		"height": 64.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.MarGo-output":
	{
		"height": 150.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "jade.sublime-project",
	"replace":
	{
		"height": 44.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Projects/grove_admin/grove_admin.sublime-project"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 220.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
